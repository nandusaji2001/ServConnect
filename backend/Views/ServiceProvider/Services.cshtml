@{
    ViewData["Title"] = "Manage Services";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">My Services</h2>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#itemModal" onclick="openCreate()">
            <i class="fas fa-plus"></i> Add Service
        </button>
    </div>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="fas fa-list me-2"></i> Services</span>
            <input id="search" class="form-control w-auto" placeholder="Search..." style="min-width: 220px;">
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th style="width: 160px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="itemsBody">
                        <tr>
                            <td colspan="5" class="text-center text-muted">Loading...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <a asp-action="Dashboard" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade" id="itemModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="itemModalTitle">Add Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="itemForm">
                    <input type="hidden" id="itemId">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input class="form-control" id="title" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" id="categorySelect" onchange="toggleCategoryOther()">
                            <option value="" selected disabled>-- Select --</option>
                            <!-- options loaded dynamically from /api/services/all -->
                            <option value="__other__">Other</option>
                        </select>
                    </div>
                    <div class="mb-3" id="categoryOtherWrap" style="display:none;">
                        <label class="form-label">Enter Category Name</label>
                        <input class="form-control" id="categoryOtherName" placeholder="e.g., AC Repair">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price</label>
                                <input type="number" class="form-control" id="price" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Active</label>
                                <select class="form-select" id="isActive">
                                    <option value="true" selected>Yes</option>
                                    <option value="false">No</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveBtn" onclick="saveItem()">Save</button>
            </div>
        </div>
    </div>
</div>

<script>
    let itemsCache = [];

    // Show/hide 'Other' category input
    function toggleCategoryOther(){
        const v = document.getElementById('categorySelect').value;
        document.getElementById('categoryOtherWrap').style.display = (v === '__other__') ? '' : 'none';
    }

    // Load categories from /api/services/all into the select
    async function loadCategoriesForItem(){
        const select = document.getElementById('categorySelect');
        if(!select) return;
        const current = select.value;
        const head = '<option value="" selected disabled>-- Select --</option>';
        const tail = '<option value="__other__">Other</option>';
        select.innerHTML = head + tail;
        try{
            const res = await fetch('/api/services/all');
            const names = await res.json();
            const other = select.querySelector('option[value="__other__"]');
            names.forEach(n => {
                const opt = document.createElement('option');
                opt.value = n;
                opt.textContent = n;
                select.insertBefore(opt, other);
            });
            if(current && [...select.options].some(o => o.value === current)) select.value = current;
        }catch{}
    }

    function fmtPrice(v){
        try { return new Intl.NumberFormat(undefined, {style:'currency', currency:'INR'}).format(v); } catch { return v; }
    }

    function renderItems(items){
        const tbody = document.getElementById('itemsBody');
        if(!items || items.length === 0){
            tbody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">No services yet.</td></tr>`;
            return;
        }
        tbody.innerHTML = '';
        items.forEach(i => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${i.title || ''}</td>
                <td class="text-truncate" style="max-width: 420px">${i.description || ''}</td>
                <td>${fmtPrice(i.price || 0)}</td>
                <td>
                    ${i.isActive ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>'}
                </td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary" onclick='openEdit(${JSON.stringify(i).replace(/'/g, "&apos;")})'><i class="fas fa-edit"></i></button>
                        <button class="btn btn-outline-danger" onclick='deleteItem("${i.id}")'><i class="fas fa-trash"></i></button>
                    </div>
                </td>`;
            tbody.appendChild(tr);
        });
    }

    async function loadMine(){
        const tbody = document.getElementById('itemsBody');
        tbody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">Loading...</td></tr>`;
        try{
            const res = await fetch('/api/items/mine', { credentials: 'same-origin' });
            if(!res.ok) throw new Error();
            itemsCache = await res.json();
            renderItems(itemsCache);
        }catch{
            tbody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">Failed to load</td></tr>`;
        }
    }

    function openCreate(){
        document.getElementById('itemModalTitle').textContent = 'Add Service';
        document.getElementById('itemId').value = '';
        document.getElementById('title').value = '';
        document.getElementById('description').value = '';
        document.getElementById('price').value = '';
        document.getElementById('isActive').value = 'true';
        document.getElementById('categorySelect').value = '';
        document.getElementById('categoryOtherName').value = '';
        toggleCategoryOther();
        loadCategoriesForItem();
    }

    function openEdit(i){
        document.getElementById('itemModalTitle').textContent = 'Edit Service';
        document.getElementById('itemId').value = i.id;
        document.getElementById('title').value = i.title || '';
        document.getElementById('description').value = i.description || '';
        document.getElementById('price').value = i.price || 0;
        document.getElementById('isActive').value = String(!!i.isActive);
        // try load categories then set selection if available
        loadCategoriesForItem().then(() => {
            if(i.category){
                const select = document.getElementById('categorySelect');
                if([...select.options].some(o => o.value === i.category)) select.value = i.category;
                else { select.value = '__other__'; document.getElementById('categoryOtherName').value = i.category; }
                toggleCategoryOther();
            }
        });
        const modal = new bootstrap.Modal(document.getElementById('itemModal'));
        modal.show();
    }

    function toggleCategoryOther(){
        const v = document.getElementById('categorySelect').value;
        document.getElementById('categoryOtherWrap').style.display = (v === '__other__') ? '' : 'none';
    }
    async function loadCategoriesForItem(){
        const select = document.getElementById('categorySelect');
        const current = select.value;
        const head = '<option value="" selected disabled>-- Select --</option>';
        const tail = '<option value="__other__">Other</option>';
        select.innerHTML = head + tail;
        try{
            const res = await fetch('/api/services/all');
            const names = await res.json();
            const other = select.querySelector('option[value="__other__"]');
            names.forEach(n => {
                const opt = document.createElement('option');
                opt.value = n;
                opt.textContent = n;
                select.insertBefore(opt, other);
            });
            if(current && [...select.options].some(o => o.value === current)) select.value = current;
        }catch{}
    }

    async function saveItem(){
        const id = document.getElementById('itemId').value;
        const selected = document.getElementById('categorySelect').value;
        const category = selected === '__other__' ? document.getElementById('categoryOtherName').value.trim() : selected;
        if(!category){
            alert('Please choose a category or enter one under Other.');
            return;
        }
        const payload = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            price: parseFloat(document.getElementById('price').value || '0'),
            isActive: document.getElementById('isActive').value === 'true',
            category: category
        };
        const opts = {
            method: id ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(payload)
        };
        const url = id ? `/api/items/${id}` : '/api/items';
        const btn = document.getElementById('saveBtn');
        btn.disabled = true;
        try{
            const res = await fetch(url, opts);
            if(!res.ok){
                const msg = await res.text();
                throw new Error(msg || 'Request failed');
            }
            // Also ensure this category appears in Browse by linking it for this provider
            try{
                await fetch('/api/services/link', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'same-origin',
                    body: JSON.stringify({ serviceName: category })
                });
            }catch{ /* ignore */ }
            bootstrap.Modal.getInstance(document.getElementById('itemModal'))?.hide();
            await loadMine();
        }catch(err){
            alert('Save failed: ' + (err?.message || 'Unknown error'));
        }finally{ btn.disabled = false; }
    }

    async function deleteItem(id){
        if(!confirm('Delete this service?')) return;
        try{
            const res = await fetch(`/api/items/${id}`, { method: 'DELETE', credentials: 'same-origin' });
            if(res.status === 204){ await loadMine(); }
            else alert('Delete failed');
        }catch{ alert('Delete failed'); }
    }

    document.getElementById('search').addEventListener('input', (e) => {
        const q = e.target.value.toLowerCase();
        const filtered = itemsCache.filter(x => `${x.title} ${x.description}`.toLowerCase().includes(q));
        renderItems(filtered);
    });

    document.addEventListener('DOMContentLoaded', loadMine);
</script>