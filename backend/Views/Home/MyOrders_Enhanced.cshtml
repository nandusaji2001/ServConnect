@{
    ViewData["Title"] = "My Orders";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">My Orders</h2>
    </div>

    <div id="ordersWrap" class="card">
        <div class="card-body">
            <div id="ordersTableWrap" class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Item</th>
                            <th>Qty</th>
                            <th>Total</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th>Tracking</th>
                            <th>Placed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersBody">
                        <tr><td colspan="9" class="text-center text-muted">Loading...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
async function loadOrders(){
    const body = document.getElementById('ordersBody');
    body.innerHTML = `<tr><td colspan="9" class="text-center text-muted">Loading...</td></tr>`;
    try{
        const res = await fetch('/api/orders/mine', { credentials: 'same-origin' });
        if(!res.ok) throw new Error('Failed to load');
        const list = await res.json();
        if(!list || list.length === 0){
            body.innerHTML = `<tr><td colspan="9" class="text-center text-muted">No orders found.</td></tr>`;
            return;
        }
        body.innerHTML = list.map(r => row(r)).join('');
        wire();
    }catch{
        body.innerHTML = `<tr><td colspan="9" class="text-center text-danger">Failed to load orders.</td></tr>`;
    }
}

function fmtAmount(a){
    return (a ?? 0).toLocaleString(undefined,{style:'currency',currency:'INR'});
}

function getStatusText(status) {
    const statusTexts = {
        0: 'Pending',
        1: 'Accepted',
        2: 'Packed',
        3: 'Shipped',
        4: 'Out for Delivery',
        5: 'Delivered',
        6: 'Cancelled'
    };
    return statusTexts[status] || 'Unknown';
}

function getStatusBadgeClass(status) {
    const statusBadges = {
        0: 'bg-warning text-dark',     // Pending
        1: 'bg-primary text-white',    // Accepted
        2: 'bg-info text-white',       // Packed
        3: 'bg-secondary text-white',  // Shipped
        4: 'bg-success text-white',    // Out for Delivery
        5: 'bg-success',               // Delivered
        6: 'bg-danger'                 // Cancelled
    };
    return statusBadges[status] || 'bg-secondary';
}

function row(o){
    const created = o.createdAtUtc ? new Date(o.createdAtUtc).toLocaleString() : '';
    const payBadge = o.paymentStatus === 1 ? 'bg-success' : (o.paymentStatus === 0 ? 'bg-warning text-dark' : 'bg-danger');
    const statusBadge = getStatusBadgeClass(o.status);
    const statusText = getStatusText(o.status);

    // Only allow delivery confirmation when status is "Out for Delivery" (4)
    const deliverDisabled = !(o.paymentStatus === 1 && o.status === 4);
    const canCancel = o.paymentStatus === 1 && (o.status === 0 || o.status === 1 || o.status === 2);

    const track = o.trackingUrl ? `<a href="${o.trackingUrl}" target="_blank" class="btn btn-sm btn-outline-info">Track</a>` : '';
    
    let actionButtons = '';
    if (o.status === 4) { // Out for Delivery
        actionButtons = `<button class="btn btn-sm btn-success deliver-btn" data-order-id="${o.id}">Item Received</button>`;
    } else if (canCancel) {
        actionButtons = `<button class="btn btn-sm btn-outline-danger cancel-btn" data-order-id="${o.id}">Cancel</button>`;
    }

    return `<tr>
        <td><code>${o.id}</code></td>
        <td>${o.itemTitle}</td>
        <td>${o.quantity}</td>
        <td>${fmtAmount(o.totalAmount)}</td>
        <td><span class="badge ${payBadge}">${['Created','Paid','Failed','Refunded'][o.paymentStatus] || ''}</span></td>
        <td><span class="badge ${statusBadge}">${statusText}</span></td>
        <td>${track}</td>
        <td>${created}</td>
        <td>${actionButtons}</td>
    </tr>`;
}

function wire(){
    document.querySelectorAll('.deliver-btn').forEach(b => b.addEventListener('click', async (e) => {
        const orderId = e.target.getAttribute('data-order-id');
        if(!confirm('Confirm that you have received this item?')) return;
        
        try {
            const res = await fetch('/api/orders/deliver', {
                method: 'POST', 
                headers: {'Content-Type': 'application/json'}, 
                credentials: 'same-origin',
                body: JSON.stringify({ orderId })
            });
            
            if(res.ok){ 
                await loadOrders(); 
                alert('Thank you! Order marked as delivered.');
            } else { 
                const error = await res.text();
                alert('Failed to update: ' + error); 
            }
        } catch (ex) {
            alert('Failed to update: ' + ex.message);
        }
    }));
    
    document.querySelectorAll('.cancel-btn').forEach(b => b.addEventListener('click', async (e) => {
        const orderId = e.target.getAttribute('data-order-id');
        if(!confirm('Cancel this order?')) return;
        
        try {
            const res = await fetch('/api/orders/cancel', {
                method: 'POST', 
                headers: {'Content-Type': 'application/json'}, 
                credentials: 'same-origin',
                body: JSON.stringify({ orderId })
            });
            
            if(res.ok){ 
                await loadOrders(); 
                alert('Order cancelled successfully.');
            } else { 
                const error = await res.text();
                alert('Failed to cancel: ' + error); 
            }
        } catch (ex) {
            alert('Failed to cancel: ' + ex.message);
        }
    }));
}

document.addEventListener('DOMContentLoaded', loadOrders);
</script>
