@{
    ViewData["Title"] = Localizer["Items.Title"];
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">@Localizer["Items.Heading"]</h2>
        <div class="d-flex gap-2">
            <a class="btn btn-outline-secondary" href="/Home/MyOrders" title="@Localizer["Items.MyOrders.Title"]">
                <i class="fas fa-list"></i> @Localizer["Items.MyOrders"]
            </a>
            <input id="search" class="form-control" placeholder="@Localizer["Items.SearchPlaceholder"]" style="min-width: 260px;">
        </div>
    </div>

    <div id="itemsGrid" class="row g-3">
        <div class="col-12 text-center text-muted">@Localizer["Items.Loading"]</div>
    </div>
</div>

<!-- Enhanced Order Modal with Address Management -->
<div class="modal fade" id="orderModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Place Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderForm">
            <div class="mb-3">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control" id="orderQty" min="1" value="1" required />
            </div>
            
            <!-- Address Selection -->
            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label">Delivery Address</label>
                    <button type="button" class="btn btn-sm btn-outline-primary" id="addNewAddressBtn">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>
                </div>
                
                <!-- Saved Addresses -->
                <div id="savedAddresses" class="mb-3">
                    <div class="text-muted">Loading addresses...</div>
                </div>
                
                <!-- New Address Form (Hidden by default) -->
                <div id="newAddressForm" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Add New Address</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Full Name *</label>
                                    <input type="text" class="form-control" id="newFullName" required />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Phone Number *</label>
                                    <input type="tel" class="form-control" id="newPhoneNumber" required />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Address Line 1 *</label>
                                <input type="text" class="form-control" id="newAddressLine1" placeholder="House/Flat No., Building Name" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Address Line 2</label>
                                <input type="text" class="form-control" id="newAddressLine2" placeholder="Street, Area, Colony" />
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">City *</label>
                                    <input type="text" class="form-control" id="newCity" required />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">State *</label>
                                    <input type="text" class="form-control" id="newState" required />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">Postal Code *</label>
                                    <input type="text" class="form-control" id="newPostalCode" required />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Landmark</label>
                                <input type="text" class="form-control" id="newLandmark" placeholder="Near..." />
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="saveAddress" checked>
                                <label class="form-check-label" for="saveAddress">
                                    Save this address for future orders
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="orderError" class="text-danger small" style="display:none;"></div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="submitOrderBtn" type="button" class="btn btn-primary">
            <i class="fas fa-check"></i> Place Order
        </button>
      </div>
    </div>
  </div>
</div>

<script>
    let allItems = [];
    let selectedItemId = null;
    let selectedAddressId = null;
    let userAddresses = [];

    function card(i){
        const img = i.imageUrl ? `<img src="${i.imageUrl}" class="card-img-top" alt="${i.title || 'item'}" style="object-fit:cover;height:160px;">` : '';
        const price = (i.price ?? 0).toLocaleString(undefined,{style:'currency',currency:'INR'});
        const badgeClass = String(i.ownerRole).toLowerCase() === 'vendor' ? 'bg-warning text-dark' : 'bg-info text-dark';
        const stock = Number.isFinite(i.stock) ? i.stock : 0;
        const disabled = stock <= 0 ? 'disabled' : '';
        const stockHtml = `<span class="badge ${stock > 0 ? 'bg-success' : 'bg-secondary'}">Stock: ${stock}</span>`;
        return `
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="card h-100">
                ${img}
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">${i.title || ''}</h5>
                    <p class="card-text flex-grow-1">${i.description || ''}</p>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-bold">${price}</span>
                        <span class="d-flex align-items-center gap-2">
                            ${stockHtml}
                            <span class="badge ${badgeClass}">${i.ownerRole}</span>
                        </span>
                    </div>
                    <div class="d-flex justify-content-end gap-2">
                        <button class="btn btn-sm btn-primary order-btn" data-id="${i.id}" ${disabled}>
                            <i class="fas fa-shopping-cart"></i> ${stock > 0 ? 'Order Now' : 'Out of Stock'}
                        </button>
                    </div>
                </div>
            </div>
        </div>`;
    }

    function addressCard(addr, isSelected = false) {
        const selectedClass = isSelected ? 'border-primary bg-light' : '';
        return `
        <div class="card address-card ${selectedClass}" data-id="${addr.id}" style="cursor: pointer;">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h6 class="card-title mb-1">${addr.label} ${addr.isDefault ? '<span class="badge bg-primary">Default</span>' : ''}</h6>
                        <p class="card-text mb-1"><strong>${addr.fullName}</strong></p>
                        <p class="card-text mb-1">${addr.phoneNumber}</p>
                        <p class="card-text small text-muted">${addr.formattedAddress}</p>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input address-radio" type="radio" name="selectedAddress" value="${addr.id}" ${isSelected ? 'checked' : ''}>
                    </div>
                </div>
            </div>
        </div>`;
    }

    async function loadAddresses() {
        try {
            const res = await fetch('/api/address', { credentials: 'same-origin' });
            if (res.ok) {
                userAddresses = await res.json();
                renderAddresses();
            } else {
                document.getElementById('savedAddresses').innerHTML = '<div class="text-muted">No saved addresses found.</div>';
            }
        } catch {
            document.getElementById('savedAddresses').innerHTML = '<div class="text-danger">Failed to load addresses.</div>';
        }
    }

    function renderAddresses() {
        const container = document.getElementById('savedAddresses');
        if (!userAddresses || userAddresses.length === 0) {
            container.innerHTML = '<div class="text-muted">No saved addresses found. Add a new address below.</div>';
            return;
        }

        const defaultAddr = userAddresses.find(a => a.isDefault);
        const selectedId = selectedAddressId || (defaultAddr ? defaultAddr.id : userAddresses[0].id);
        selectedAddressId = selectedId;

        container.innerHTML = userAddresses.map(addr => addressCard(addr, addr.id === selectedId)).join('');
        
        // Wire address selection
        document.querySelectorAll('.address-card').forEach(card => {
            card.addEventListener('click', () => {
                selectedAddressId = card.getAttribute('data-id');
                renderAddresses();
            });
        });

        document.querySelectorAll('.address-radio').forEach(radio => {
            radio.addEventListener('change', (e) => {
                selectedAddressId = e.target.value;
                renderAddresses();
            });
        });
    }

    function wireCardActions(){
        document.querySelectorAll('.order-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                selectedItemId = e.currentTarget.getAttribute('data-id');
                const modalEl = document.getElementById('orderModal');
                const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                
                // Reset form
                document.getElementById('orderQty').value = 1;
                document.getElementById('orderError').style.display = 'none';
                document.getElementById('newAddressForm').style.display = 'none';
                
                // Load addresses
                await loadAddresses();
                
                modal.show();
            });
        });
    }

    function render(items){
        const grid = document.getElementById('itemsGrid');
        if(!items || items.length === 0){
            grid.innerHTML = `<div class='col-12 text-center text-muted'>No items found.</div>`;
            return;
        }
        grid.innerHTML = items.map(card).join('');
        wireCardActions();
    }

    async function load(){
        const grid = document.getElementById('itemsGrid');
        grid.innerHTML = `<div class='col-12 text-center text-muted'>Loading...</div>`;
        try{
            const res = await fetch('/api/items', { credentials: 'same-origin' });
            if(!res.ok) throw new Error();
            allItems = await res.json();
            render(allItems);
        }catch{
            grid.innerHTML = `<div class='col-12 text-center text-danger'>Failed to load items.</div>`;
        }
    }

    document.getElementById('search').addEventListener('input', (e) => {
        const q = e.target.value.toLowerCase();
        const filtered = allItems.filter(x => `${x.title} ${x.description}`.toLowerCase().includes(q));
        render(filtered);
    });

    function applyRoleFilter(items){
        const params = new URLSearchParams(location.search);
        const role = params.get('role');
        if(!role) return items;
        return items.filter(x => String(x.ownerRole).toLowerCase() === role.toLowerCase());
    }

    // Toggle new address form
    document.getElementById('addNewAddressBtn').addEventListener('click', () => {
        const form = document.getElementById('newAddressForm');
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
        
        if (form.style.display === 'block') {
            selectedAddressId = null;
            renderAddresses();
        }
    });

    // Lazy-load Razorpay script if not available
    function ensureRazorpay() {
        return new Promise((resolve, reject) => {
            if (window.Razorpay) return resolve();
            const script = document.createElement('script');
            script.src = 'https://checkout.razorpay.com/v1/checkout.js';
            script.onload = () => resolve();
            script.onerror = () => reject(new Error('Failed to load Razorpay.'));
            document.head.appendChild(script);
        });
    }

    function getOrderData() {
        const qty = parseInt(document.getElementById('orderQty').value || '1', 10);
        
        if (selectedAddressId) {
            // Using saved address
            return {
                itemId: selectedItemId,
                quantity: qty,
                userAddressId: selectedAddressId
            };
        } else {
            // Using new address
            return {
                itemId: selectedItemId,
                quantity: qty,
                fullName: document.getElementById('newFullName').value.trim(),
                phoneNumber: document.getElementById('newPhoneNumber').value.trim(),
                addressLine1: document.getElementById('newAddressLine1').value.trim(),
                addressLine2: document.getElementById('newAddressLine2').value.trim(),
                city: document.getElementById('newCity').value.trim(),
                state: document.getElementById('newState').value.trim(),
                postalCode: document.getElementById('newPostalCode').value.trim(),
                country: 'India',
                landmark: document.getElementById('newLandmark').value.trim()
            };
        }
    }

    function validateOrderData(data) {
        if (!selectedItemId) return 'No item selected';
        if (!data.quantity || data.quantity < 1) return 'Quantity must be at least 1';
        
        if (!selectedAddressId) {
            // Validate new address
            if (!data.fullName) return 'Full name is required';
            if (!data.phoneNumber) return 'Phone number is required';
            if (!data.addressLine1) return 'Address line 1 is required';
            if (!data.city) return 'City is required';
            if (!data.state) return 'State is required';
            if (!data.postalCode) return 'Postal code is required';
        }
        
        const item = allItems.find(x => x.id === selectedItemId);
        if (item && item.stock && data.quantity > item.stock) {
            return `Quantity exceeds available stock (${item.stock})`;
        }
        
        return null;
    }

    document.getElementById('submitOrderBtn').addEventListener('click', async () => {
        const err = document.getElementById('orderError');
        err.style.display = 'none';

        const orderData = getOrderData();
        const validationError = validateOrderData(orderData);
        
        if (validationError) {
            err.textContent = validationError;
            err.style.display = 'block';
            return;
        }

        const btn = document.getElementById('submitOrderBtn');
        btn.disabled = true;
        
        try {
            // Step 1: Create backend order
            const endpoint = selectedAddressId ? '/api/orders' : '/api/orders/with-address';
            const payload = selectedAddressId ? 
                { itemId: orderData.itemId, quantity: orderData.quantity, shippingAddress: userAddresses.find(a => a.id === selectedAddressId)?.formattedAddress || '' } :
                orderData;

            const res = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(payload)
            });
            
            if (!res.ok) {
                const txt = await res.text();
                throw new Error(txt || 'Order creation failed');
            }
            
            const data = await res.json();

            // Step 2: Load Razorpay and open checkout
            await ensureRazorpay();
            const options = {
                key: data.order.key || data.key,
                amount: data.order.amount || data.amount,
                currency: data.order.currency || data.currency || 'INR',
                name: 'ServConnect',
                description: data.order.description || data.description || 'Order Payment',
                order_id: data.order.razorpayOrderId || data.razorpayOrderId,
                handler: async function (response) {
                    try {
                        // Step 3: Verify payment with backend
                        const vr = await fetch('/api/orders/verify-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'same-origin',
                            body: JSON.stringify({
                                orderId: data.order.id || data.orderId,
                                razorpayOrderId: response.razorpay_order_id,
                                razorpayPaymentId: response.razorpay_payment_id,
                                razorpaySignature: response.razorpay_signature
                            })
                        });
                        
                        if (!vr.ok) {
                            const t = await vr.text();
                            throw new Error(t || 'Payment verification failed');
                        }
                        
                        const modalEl = document.getElementById('orderModal');
                        const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                        modal.hide();
                        alert('Order placed successfully! Payment confirmed.');
                        
                        // Reload addresses if new address was saved
                        if (!selectedAddressId && document.getElementById('saveAddress').checked) {
                            await loadAddresses();
                        }
                        
                    } catch (verifyErr) {
                        err.textContent = verifyErr?.message || 'Payment verification failed';
                        err.style.display = 'block';
                    }
                },
                prefill: {
                    name: selectedAddressId ? userAddresses.find(a => a.id === selectedAddressId)?.fullName : orderData.fullName,
                    contact: selectedAddressId ? userAddresses.find(a => a.id === selectedAddressId)?.phoneNumber : orderData.phoneNumber
                },
                theme: { color: '#3399cc' }
            };
            
            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (resp) {
                err.textContent = resp?.error?.description || 'Payment failed';
                err.style.display = 'block';
            });
            rzp.open();
            
        } catch (ex) {
            err.textContent = ex?.message || 'Failed to place order';
            err.style.display = 'block';
        } finally {
            btn.disabled = false;
        }
    });

    document.addEventListener('DOMContentLoaded', async () => {
        await load();
        allItems = applyRoleFilter(allItems);
        render(allItems);
    });
</script>
