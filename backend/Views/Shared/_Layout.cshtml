<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ServConnect</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/theme.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ServConnect.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
</head>
<body class="d-flex flex-column min-vh-100" data-authed="@((User?.Identity?.IsAuthenticated ?? false) ? "true" : "false")">
    <header>
        <nav class="navbar app-navbar navbar-expand-sm navbar-toggleable-sm navbar-dark mb-3">
            <div class="container">
                @if (ViewBag.RestrictNav == true)
                {
                    <span class="navbar-brand"><i class="bi bi-diagram-3-fill"></i> ServConnect</span>
                }
                else if (User?.Identity?.IsAuthenticated ?? false)
                {
                    @if (User.IsInRole(RoleTypes.Admin))
                    {
                        <a class="navbar-brand" asp-controller="Admin" asp-action="Dashboard"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                    }
                    else if (User.IsInRole(RoleTypes.ServiceProvider))
                    {
                        <a class="navbar-brand" asp-controller="ServiceProvider" asp-action="Dashboard"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                    }
                    else if (User.IsInRole(RoleTypes.Vendor))
                    {
                        <a class="navbar-brand" asp-controller="Vendor" asp-action="Dashboard"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                    }
                    else if (User.IsInRole(RoleTypes.User))
                    {
                        <a class="navbar-brand" asp-controller="Home" asp-action="Index"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                    }
                    else
                    {
                        <a class="navbar-brand" asp-controller="Home" asp-action="Index"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                    }
                }
                else
                {
                    <a class="navbar-brand" asp-controller="Home" asp-action="Index"><i class="bi bi-diagram-3-fill"></i> ServConnect</a>
                }
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        @if (ViewBag.RestrictNav == true)
                        {
                            <!-- Navigation restricted: no links except logout (handled in _LoginPartial) -->
                        }
                        else
                        {
                            @* No inline nav items for authenticated users; only the profile dropdown is shown via _LoginPartial *@
                        }
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    <div class="container flex-fill">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    @await Component.InvokeAsync("AdvertisementBanner")


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- OTP Notification System -->
    <script>
        let otpNotificationsVisible = false;
        
        // Check for active OTPs on page load (only for users)
        document.addEventListener('DOMContentLoaded', function() {
            const isAuthenticated = document.body.getAttribute('data-authed') === 'true';
            if (isAuthenticated) {
                checkActiveOtps();
                // Check every 30 seconds for new OTPs
                setInterval(checkActiveOtps, 30000);
            }
        });
        
        async function checkActiveOtps() {
            try {
                const response = await fetch('/api/bookings/active-otps');
                if (response.ok) {
                    const otps = await response.json();
                    updateOtpNotifications(otps);
                }
            } catch (error) {
                console.error('Failed to check active OTPs:', error);
            }
        }
        
        function updateOtpNotifications(otps) {
            const badge = document.getElementById('otpNotificationBadge');
            const count = document.getElementById('otpNotificationCount');
            const list = document.getElementById('otpNotificationsList');
            
            if (!badge || !count || !list) return;
            
            if (otps.length > 0) {
                badge.style.display = 'block';
                badge.textContent = otps.length;
                count.textContent = `${otps.length} active`;
                
                list.innerHTML = otps.map(otp => `
                    <div class="dropdown-item border-bottom">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="fw-semibold text-primary">${otp.serviceName}</div>
                                <div class="small text-muted">by ${otp.providerName}</div>
                                <div class="mt-1">
                                    <span class="badge bg-success fs-6">${otp.otpCode}</span>
                                </div>
                            </div>
                            <div class="text-end">
                                <small class="text-muted">
                                    ${Math.max(0, Math.floor(otp.timeRemaining))} min left
                                </small>
                            </div>
                        </div>
                        <div class="small text-info mt-1">
                            <i class="fas fa-info-circle me-1"></i>
                            Share this code with your service provider to start the service
                        </div>
                    </div>
                `).join('');
            } else {
                badge.style.display = 'none';
                count.textContent = '0 active';
                list.innerHTML = `
                    <div class="dropdown-item-text text-center text-muted py-3">
                        <i class="fas fa-info-circle me-1"></i>No active service codes
                    </div>
                `;
            }
        }
        
        function toggleOtpNotifications() {
            const dropdown = document.getElementById('otpNotificationsDropdown');
            if (!dropdown) return;
            
            otpNotificationsVisible = !otpNotificationsVisible;
            dropdown.style.display = otpNotificationsVisible ? 'block' : 'none';
            
            // Close when clicking outside
            if (otpNotificationsVisible) {
                document.addEventListener('click', closeOtpNotificationsOnOutsideClick);
            } else {
                document.removeEventListener('click', closeOtpNotificationsOnOutsideClick);
            }
        }
        
        function closeOtpNotificationsOnOutsideClick(event) {
            const dropdown = document.getElementById('otpNotificationsDropdown');
            const bell = document.getElementById('otpNotificationBell');
            
            if (dropdown && bell && !dropdown.contains(event.target) && !bell.contains(event.target)) {
                dropdown.style.display = 'none';
                otpNotificationsVisible = false;
                document.removeEventListener('click', closeOtpNotificationsOnOutsideClick);
            }
        }
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>