@{
    ViewData["Title"] = Localizer["Title.ManageProducts"];
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>@Localizer["Heading.ManageProducts"]</h2>
                <button class="btn btn-primary" onclick="openCreate()">
                    <i class="fas fa-plus"></i> @Localizer["Button.AddNewProduct"]
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5>@Localizer["YourProducts"]</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th style="width:80px;">@Localizer["Tbl.Image"]</th>
                                    <th>@Localizer["Tbl.ProductName"]</th>
                                    <th>@Localizer["Tbl.Category"]</th>
                                    <th>@Localizer["Tbl.Price"]</th>
                                    <th>@Localizer["Tbl.Stock"]</th>
                                    <th>@Localizer["Tbl.Status"]</th>
                                    <th style="width:160px;">@Localizer["Tbl.Actions"]</th>
                                </tr>
                            </thead>
                            <tbody id="myItemsBody">
                                <tr>
                                    <td colspan="7" class="text-center text-muted">
                                        @Localizer["Loading"]
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-12">
            <a asp-action="Dashboard" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> @Localizer["BackToDashboard"]
            </a>
        </div>
    </div>
</div>

<!-- Create/Edit Product Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalTitle">@Localizer["Modal.AddNewProduct"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <input type="hidden" id="productId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">@Localizer["Lbl.ProductName"]</label>
                                <input type="text" class="form-control" id="productName" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productCategory" class="form-label">@Localizer["Lbl.Category"]</label>
                                <select class="form-control" id="productCategory">
                                    <option value="">@Localizer["Opt.SelectCategory"]</option>
                                    <option value="Electronics">@Localizer["Opt.Electronics"]</option>
                                    <option value="Clothing">@Localizer["Opt.Clothing"]</option>
                                    <option value="Home & Garden">@Localizer["Opt.HomeGarden"]</option>
                                    <option value="Sports">@Localizer["Opt.Sports"]</option>
                                    <option value="Books">@Localizer["Opt.Books"]</option>
                                    <option value="Other">@Localizer["Opt.Other"]</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="productDescription" class="form-label">@Localizer["Lbl.Description"]</label>
                        <textarea class="form-control" id="productDescription" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productPrice" class="form-label">@Localizer["Lbl.Price"] (â‚¹)</label>
                                <input type="number" class="form-control" id="productPrice" step="0.01" min="0">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productStock" class="form-label">@Localizer["Lbl.StockQty"]</label>
                                <input type="number" class="form-control" id="productStock" min="0">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productSKU" class="form-label">@Localizer["Lbl.SKU"]</label>
                                <input type="text" class="form-control" id="productSKU">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="productImage" class="form-label">@Localizer["Lbl.ProductImage"]</label>
                        <input type="file" class="form-control" id="productImage" accept="image/*">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["Lbl.Active"]</label>
                        <select class="form-select" id="productIsActive">
                            <option value="true" selected>@Localizer["Opt.Yes"]</option>
                            <option value="false">@Localizer["Opt.No"]</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Btn.Cancel"]</button>
                <button id="submitProduct" type="button" class="btn btn-primary">@Localizer["Btn.Save"]</button>
            </div>
        </div>
    </div>
</div>

<script>
    async function loadMine(){
        const tbody = document.getElementById('myItemsBody');
        tbody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">@Localizer["Loading"]</td></tr>`;
        try{
            const res = await fetch('/api/items/mine', { credentials: 'same-origin' });
            if(!res.ok) throw new Error('Failed');
            const items = await res.json();
            if(!items || items.length === 0){
                tbody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">@Localizer["NoProductsYet"]</td></tr>`;
                return;
            }
            tbody.innerHTML = items.map(i => `
                <tr>
                    <td>${i.imageUrl ? `<img src='${i.imageUrl}' alt='img' style='width:60px;height:60px;object-fit:cover;border-radius:6px;'>` : ''}</td>
                    <td>${i.title || ''}</td>
                    <td>${i.category || ''}</td>
                    <td>${(i.price ?? 0).toLocaleString(undefined,{style:'currency',currency:'INR'})}</td>
                    <td>${i.stock ?? 0}</td>
                    <td>${i.isActive ? `<span class="badge bg-success">@Localizer["Status.Active"]</span>` : `<span class="badge bg-secondary">@Localizer["Status.Inactive"]</span>`}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick='openEdit(${JSON.stringify(i).replace(/'/g, "&apos;")})'>@Localizer["Btn.Edit"]</button>
                        <button class="btn btn-sm btn-outline-danger" data-id="${i.id}">@Localizer["Btn.Delete"]</button>
                    </td>
                </tr>`).join('');

            // wire delete (optimistic: confirm only, remove row immediately; no success/failure alerts)
            tbody.querySelectorAll('button[data-id]').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.currentTarget.getAttribute('data-id');
                    if(!confirm('@Localizer["Confirm.DeleteItem"]')) return;
                    const row = e.currentTarget.closest('tr');
                    row?.remove(); // optimistic UI update
                    try{
                        await fetch(`/api/items/${id}`, { method:'DELETE', credentials:'same-origin' });
                    }catch{ /* ignore errors to avoid confusing alerts */ }
                });
            });
        }catch{
            tbody.innerHTML = `<tr><td colspan="7" class="text-danger text-center">@Localizer["Error.FailedToLoad"]</td></tr>`;
        }
    }

    function openCreate(){
        document.getElementById('productModalTitle').textContent = '@Localizer["Modal.AddNewProduct"]';
        document.getElementById('productId').value = '';
        document.getElementById('productName').value = '';
        document.getElementById('productDescription').value = '';
        document.getElementById('productCategory').value = '';
        document.getElementById('productPrice').value = '';
        document.getElementById('productStock').value = '';
        document.getElementById('productSKU').value = '';
        document.getElementById('productIsActive').value = 'true';
        const modal = new bootstrap.Modal(document.getElementById('productModal'));
        modal.show();
    }

    function openEdit(i){
        document.getElementById('productModalTitle').textContent = '@Localizer["Modal.EditProduct"]';
        document.getElementById('productId').value = i.id;
        document.getElementById('productName').value = i.title || '';
        document.getElementById('productDescription').value = i.description || '';
        document.getElementById('productCategory').value = i.category || '';
        document.getElementById('productPrice').value = i.price || 0;
        document.getElementById('productStock').value = i.stock || 0;
        document.getElementById('productSKU').value = i.sku || '';
        document.getElementById('productIsActive').value = String(!!i.isActive);
        const modal = new bootstrap.Modal(document.getElementById('productModal'));
        modal.show();
    }

    document.getElementById('submitProduct').addEventListener('click', async () => {
        const id = document.getElementById('productId').value;
        const isEdit = !!id;

        if(isEdit){
            // PUT JSON for update
            const payload = {
                title: document.getElementById('productName').value,
                description: document.getElementById('productDescription').value,
                price: parseFloat(document.getElementById('productPrice').value || '0'),
                category: document.getElementById('productCategory').value,
                isActive: document.getElementById('productIsActive').value === 'true'
            };
            try{
                const res = await fetch(`/api/items/${id}`, {
                    method: 'PUT',
                    headers: {'Content-Type':'application/json'},
                    credentials: 'same-origin',
                    body: JSON.stringify(payload)
                });
                if(!res.ok){ alert('@Localizer["Error.UpdateFailed"]'); return; }
                bootstrap.Modal.getInstance(document.getElementById('productModal'))?.hide();
                loadMine();
            }catch{ alert('@Localizer["Error.UpdateFailed"]'); }
        }else{
            // POST multipart for create-with-image
            const fd = new FormData();
            fd.append('title', document.getElementById('productName').value);
            fd.append('description', document.getElementById('productDescription').value);
            fd.append('price', document.getElementById('productPrice').value || '0');
            fd.append('category', document.getElementById('productCategory').value);
            fd.append('sku', document.getElementById('productSKU').value);
            fd.append('stock', document.getElementById('productStock').value || '0');
            const file = document.getElementById('productImage').files[0];
            if(file) fd.append('image', file);
            try{
                const res = await fetch('/api/items/with-image', { method:'POST', body: fd, credentials:'same-origin' });
                if(!res.ok){ alert('@Localizer["Error.AddFailed"]'); return; }
                bootstrap.Modal.getInstance(document.getElementById('productModal'))?.hide();
                loadMine();
            }catch{ alert('@Localizer["Error.AddFailed"]'); }
        }
    });

    document.addEventListener('DOMContentLoaded', loadMine);
</script>