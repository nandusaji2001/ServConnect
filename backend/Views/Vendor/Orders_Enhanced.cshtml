@{
    ViewData["Title"] = "Vendor Orders";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Orders For My Items</h2>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Item</th>
                            <th>Qty</th>
                            <th>Total</th>
                            <th>User</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th>Address</th>
                            <th>Placed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="tbody">
                        <tr><td colspan="10" class="text-center text-muted">Loading...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
function fmtAmount(a){
  return (a ?? 0).toLocaleString(undefined,{style:'currency',currency:'INR'});
}

function getStatusText(status) {
    const statusTexts = {
        0: 'Pending',
        1: 'Accepted', 
        2: 'Packed',
        3: 'Shipped',
        4: 'Out for Delivery',
        5: 'Delivered',
        6: 'Cancelled'
    };
    return statusTexts[status] || 'Unknown';
}

function getStatusBadgeClass(status) {
    const statusBadges = {
        0: 'bg-warning text-dark',     // Pending
        1: 'bg-primary text-white',    // Accepted
        2: 'bg-info text-white',       // Packed
        3: 'bg-secondary text-white',  // Shipped
        4: 'bg-success text-white',    // Out for Delivery
        5: 'bg-success',               // Delivered
        6: 'bg-danger'                 // Cancelled
    };
    return statusBadges[status] || 'bg-secondary';
}

function canUpdateStatus(order, targetStatus) {
    // Only paid orders can be updated
    if (order.paymentStatus !== 1) return false;
    
    // Can't update delivered or cancelled orders
    if (order.status === 5 || order.status === 6) return false;
    
    // Status progression rules
    switch (targetStatus) {
        case 1: return order.status === 0; // Accept only from Pending
        case 2: return order.status === 1; // Pack only from Accepted
        case 3: return order.status === 2; // Ship only from Packed
        case 4: return order.status === 3; // Out for delivery only from Shipped
        default: return false;
    }
}

function getAvailableStatuses(order) {
    const statuses = [];
    if (canUpdateStatus(order, 1)) statuses.push({value: 1, text: 'Accept Order'});
    if (canUpdateStatus(order, 2)) statuses.push({value: 2, text: 'Mark as Packed'});
    if (canUpdateStatus(order, 3)) statuses.push({value: 3, text: 'Mark as Shipped'});
    if (canUpdateStatus(order, 4)) statuses.push({value: 4, text: 'Mark as Out for Delivery'});
    return statuses;
}

function formatAddress(order) {
    if (order.shippingFullName && order.shippingAddressLine1) {
        return `${order.shippingFullName}<br>
                ${order.shippingAddressLine1}${order.shippingAddressLine2 ? ', ' + order.shippingAddressLine2 : ''}<br>
                ${order.shippingCity}, ${order.shippingState} - ${order.shippingPostalCode}<br>
                Phone: ${order.shippingPhoneNumber}`;
    }
    return order.shippingAddress || 'No address provided';
}

function row(o){
  const created = o.createdAtUtc ? new Date(o.createdAtUtc).toLocaleString() : '';
  const payBadge = o.paymentStatus === 1 ? 'bg-success' : (o.paymentStatus === 0 ? 'bg-warning text-dark' : 'bg-danger');
  const statusBadge = getStatusBadgeClass(o.status);
  const statusText = getStatusText(o.status);
  
  const availableStatuses = getAvailableStatuses(o);
  const canCancel = o.paymentStatus === 1 && (o.status === 0 || o.status === 1 || o.status === 2);
  
  let statusDropdown = '';
  if (availableStatuses.length > 0) {
    statusDropdown = `
      <div class="dropdown">
        <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
          Update Status
        </button>
        <ul class="dropdown-menu">
          ${availableStatuses.map(s => `<li><a class="dropdown-item status-update" href="#" data-order-id="${o.id}" data-status="${s.value}">${s.text}</a></li>`).join('')}
        </ul>
      </div>`;
  }
  
  const trackingButton = o.status >= 3 ? `<button class="btn btn-sm btn-outline-secondary track-btn" data-order-id="${o.id}">Set Tracking</button>` : '';
  const cancelButton = canCancel ? `<button class="btn btn-sm btn-outline-danger cancel-btn" data-order-id="${o.id}">Cancel</button>` : '';

  return `<tr>
    <td><code>${o.id}</code></td>
    <td>${o.itemTitle}</td>
    <td>${o.quantity}</td>
    <td>${fmtAmount(o.totalAmount)}</td>
    <td>${o.userEmail || ''}</td>
    <td><span class="badge ${payBadge}">${['Created','Paid','Failed','Refunded'][o.paymentStatus] || ''}</span></td>
    <td><span class="badge ${statusBadge}">${statusText}</span></td>
    <td><small>${formatAddress(o)}</small></td>
    <td>${created}</td>
    <td>
      <div class="d-flex flex-column gap-1">
        ${statusDropdown}
        <div class="d-flex gap-1">
          ${trackingButton}
          ${cancelButton}
        </div>
      </div>
    </td>
  </tr>`;
}

async function load(){
  const tbody = document.getElementById('tbody');
  tbody.innerHTML = `<tr><td colspan="10" class="text-center text-muted">Loading...</td></tr>`;
  try {
    const res = await fetch('/api/orders/vendor', { credentials: 'same-origin' });
    if(!res.ok) throw new Error('Failed');
    const list = await res.json();
    if(!list || list.length === 0){
      tbody.innerHTML = `<tr><td colspan="10" class="text-center text-muted">No orders yet.</td></tr>`;
      return;
    }
    tbody.innerHTML = list.map(row).join('');
    wire();
  } catch {
    tbody.innerHTML = `<tr><td colspan="10" class="text-center text-danger">Failed to load orders.</td></tr>`;
  }
}

async function updateOrderStatus(orderId, status, trackingUrl = null) {
  try {
    const res = await fetch('/api/orders/update-status', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      credentials: 'same-origin',
      body: JSON.stringify({ orderId, status: status.toString(), trackingUrl })
    });
    
    if (res.ok) {
      await load();
      alert('Order status updated successfully!');
    } else {
      const error = await res.text();
      alert('Failed to update status: ' + error);
    }
  } catch (ex) {
    alert('Failed to update status: ' + ex.message);
  }
}

function wire(){
  // Status update handlers
  document.querySelectorAll('.status-update').forEach(link => {
    link.addEventListener('click', async (e) => {
      e.preventDefault();
      const orderId = e.target.getAttribute('data-order-id');
      const status = parseInt(e.target.getAttribute('data-status'));
      const statusText = e.target.textContent;
      
      let trackingUrl = null;
      if (status === 3) { // Shipped status
        trackingUrl = prompt('Optional: Enter tracking URL (leave blank to skip)');
      }
      
      if (confirm(`${statusText}?`)) {
        await updateOrderStatus(orderId, status, trackingUrl);
      }
    });
  });
  
  // Tracking URL handlers
  document.querySelectorAll('.track-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const orderId = e.target.getAttribute('data-order-id');
      const trackingUrl = prompt('Enter tracking URL');
      if (!trackingUrl) return;
      
      try {
        const res = await fetch('/api/orders/set-tracking', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          credentials: 'same-origin',
          body: JSON.stringify({ orderId, trackingUrl })
        });
        
        if (res.ok) {
          alert('Tracking URL updated successfully!');
        } else {
          alert('Failed to set tracking URL');
        }
      } catch {
        alert('Failed to set tracking URL');
      }
    });
  });
  
  // Cancel handlers
  document.querySelectorAll('.cancel-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const orderId = e.target.getAttribute('data-order-id');
      if (!confirm('Cancel this order?')) return;
      
      try {
        const res = await fetch('/api/orders/cancel', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          credentials: 'same-origin',
          body: JSON.stringify({ orderId })
        });
        
        if (res.ok) {
          await load();
          alert('Order cancelled successfully!');
        } else {
          alert('Failed to cancel order');
        }
      } catch {
        alert('Failed to cancel order');
      }
    });
  });
}

document.addEventListener('DOMContentLoaded', load);
</script>
