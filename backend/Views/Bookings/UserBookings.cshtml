@model List<ServConnect.Models.Booking>
@{
    ViewData["Title"] = "My Bookings";
}
<div class="container py-4">
    <h2 class="mb-3">My Bookings</h2>

    @if (ViewBag.HasPendingPayments)
    {
        <div class="alert alert-warning">
            <h5><i class="fas fa-exclamation-triangle me-2"></i>Pending Payments</h5>
            <p class="mb-2">You have pending payments that must be completed before booking new services:</p>
            @foreach (var payment in ViewBag.PendingPayments)
            {
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span><strong>@payment.ServiceName</strong> by @payment.ProviderName - ₹@payment.AmountInRupees.ToString("F2")</span>
                    <a href="/booking-payment/pay/@payment.Id" class="btn btn-sm btn-warning">
                        <i class="fas fa-credit-card me-1"></i>Pay Now
                    </a>
                </div>
            }
        </div>
    }

    <!-- Transfer Requests Section -->
    <div id="transferRequestsSection" class="mb-4" style="display: none;">
        <div class="alert alert-info">
            <h5><i class="fas fa-exchange-alt me-2"></i>Service Transfer Requests</h5>
            <p class="mb-2">You have pending service transfer requests that require your approval:</p>
            <div id="transferRequestsList">
                <!-- Transfer requests will be loaded here -->
            </div>
        </div>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info">You have no bookings yet.</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th>Provider</th>
                        <th>Service</th>
                        <th>Price</th>
                        <th>Date & Time</th>
                        <th>Booking Status</th>
                        <th>Service Status</th>
                        <th>Message</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var b in Model)
                    {
                        <tr>
                            <td>@b.ProviderName</td>
                            <td>@b.ServiceName</td>
                            <td>
                                @if (b.Price > 0)
                                {
                                    <span>@b.Currency @b.Price.ToString("F2") @b.PriceUnit</span>
                                }
                                else
                                {
                                    <span class="text-muted">Price on request</span>
                                }
                            </td>
                            <td>@b.ServiceDateTime.ToLocalTime().ToString("f")</td>
                            <td>
                                @switch (b.Status)
                                {
                                    case ServConnect.Models.BookingStatus.Pending:
                                        <span class="badge bg-warning text-dark">Pending</span>
                                        break;
                                    case ServConnect.Models.BookingStatus.Accepted:
                                        <span class="badge bg-success">Accepted</span>
                                        break;
                                    case ServConnect.Models.BookingStatus.Rejected:
                                        <span class="badge bg-danger">Rejected</span>
                                        break;
                                }
                                @if (b.IsCompleted)
                                {
                                    <div><span class="badge bg-secondary mt-1">Completed</span></div>
                                }
                            </td>
                            <td>
                                @switch (b.ServiceStatus)
                                {
                                    case ServConnect.Models.ServiceStatus.NotStarted:
                                        <span class="badge bg-secondary">Not Started</span>
                                        break;
                                    case ServConnect.Models.ServiceStatus.InProgress:
                                        <span class="badge bg-primary">In Progress</span>
                                        @if (b.ServiceStartedAt.HasValue)
                                        {
                                            <div class="small text-muted">Started: @b.ServiceStartedAt.Value.ToLocalTime().ToString("g")</div>
                                        }
                                        break;
                                    case ServConnect.Models.ServiceStatus.Completed:
                                        <span class="badge bg-success">Service Completed</span>
                                        @if (b.ServiceCompletedAt.HasValue)
                                        {
                                            <div class="small text-muted">Completed: @b.ServiceCompletedAt.Value.ToLocalTime().ToString("g")</div>
                                        }
                                        break;
                                    case ServConnect.Models.ServiceStatus.Cancelled:
                                        <span class="badge bg-danger">Cancelled</span>
                                        break;
                                }
                            </td>
                            <td>@(string.IsNullOrWhiteSpace(b.ProviderMessage) ? "—" : b.ProviderMessage)</td>
                            <td>
                                @if (b.ServiceStatus == ServConnect.Models.ServiceStatus.Completed && !b.IsCompleted)
                                {
                                    <button class="btn btn-sm btn-success" onclick="completePayment('@b.Id')">
                                        <i class="fas fa-credit-card me-1"></i> Complete Payment
                                    </button>
                                }
                                else if (b.IsCompleted)
                                {
                                    <div class="small text-success">
                                        <i class="fas fa-check-circle me-1"></i>Rated
                                        @if (b.UserRating.HasValue)
                                        {
                                            <div class="mt-1">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= b.UserRating ? "text-warning" : "text-muted")"></i>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else if (b.Status == ServConnect.Models.BookingStatus.Pending)
                                {
                                    <span class="text-muted small">Waiting for response</span>
                                }
                                else if (b.Status == ServConnect.Models.BookingStatus.Rejected)
                                {
                                    <span class="text-muted small">Booking rejected</span>
                                }
                                else
                                {
                                    <span class="text-muted small">Waiting for service</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


<script>
    // Load transfer requests on page load
    document.addEventListener('DOMContentLoaded', function() {
        loadTransferRequests();
    });

    async function loadTransferRequests() {
        try {
            const res = await fetch('/api/bookings/transfer/user');
            if (res.ok) {
                const transfers = await res.json();
                const pendingTransfers = transfers.filter(t => t.status === 'PendingUserApproval');
                
                if (pendingTransfers.length > 0) {
                    displayTransferRequests(pendingTransfers);
                    document.getElementById('transferRequestsSection').style.display = 'block';
                }
            }
        } catch (error) {
            console.error('Failed to load transfer requests:', error);
        }
    }

    function displayTransferRequests(transfers) {
        const container = document.getElementById('transferRequestsList');
        container.innerHTML = '';
        
        transfers.forEach(transfer => {
            const transferHtml = `
                <div class="card mb-3" id="transfer-${transfer.id}">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h6 class="card-title mb-1">
                                    <i class="fas fa-exchange-alt me-2 text-primary"></i>
                                    ${transfer.serviceName} Transfer Request
                                </h6>
                                <p class="card-text mb-2">
                                    <strong>${transfer.originalProviderName}</strong> wants to transfer your service to 
                                    <strong>${transfer.newProviderName}</strong>
                                </p>
                                <div class="small text-muted">
                                    <div><i class="fas fa-calendar me-1"></i>Service Date: ${new Date(transfer.serviceDateTime).toLocaleString()}</div>
                                    <div><i class="fas fa-clock me-1"></i>Requested: ${new Date(transfer.requestedAt).toLocaleString()}</div>
                                    ${transfer.transferReason ? `<div><i class="fas fa-comment me-1"></i>Reason: ${transfer.transferReason}</div>` : ''}
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <div class="d-flex gap-2 justify-content-end">
                                    <button class="btn btn-sm btn-success" onclick="approveTransfer('${transfer.id}')">
                                        <i class="fas fa-check me-1"></i>Approve
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="rejectTransfer('${transfer.id}')">
                                        <i class="fas fa-times me-1"></i>Reject
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', transferHtml);
        });
    }

    async function approveTransfer(transferId) {
        const message = prompt('Optional message to the providers (Approve):') || '';
        
        try {
            const res = await fetch('/api/bookings/transfer/user-approve', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    transferId: transferId,
                    message: message
                })
            });
            
            if (res.ok) {
                alert('Transfer request approved! The new provider will be notified.');
                // Remove the transfer card
                document.getElementById(`transfer-${transferId}`).remove();
                
                // Hide section if no more transfers
                const remainingTransfers = document.querySelectorAll('#transferRequestsList .card');
                if (remainingTransfers.length === 0) {
                    document.getElementById('transferRequestsSection').style.display = 'none';
                }
                
                // Reload page to show updated booking information
                setTimeout(() => location.reload(), 1500);
            } else {
                const error = await res.json();
                alert('Failed to approve transfer: ' + (error.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Approve transfer error:', error);
            alert('Failed to approve transfer. Please try again.');
        }
    }

    async function rejectTransfer(transferId) {
        const message = prompt('Optional message to the original provider (Reject):') || '';
        
        try {
            const res = await fetch('/api/bookings/transfer/user-reject', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    transferId: transferId,
                    message: message
                })
            });
            
            if (res.ok) {
                alert('Transfer request rejected. The service will remain with the original provider.');
                // Remove the transfer card
                document.getElementById(`transfer-${transferId}`).remove();
                
                // Hide section if no more transfers
                const remainingTransfers = document.querySelectorAll('#transferRequestsList .card');
                if (remainingTransfers.length === 0) {
                    document.getElementById('transferRequestsSection').style.display = 'none';
                }
            } else {
                const error = await res.json();
                alert('Failed to reject transfer: ' + (error.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Reject transfer error:', error);
            alert('Failed to reject transfer. Please try again.');
        }
    }

    async function completePayment(bookingId) {
        try {
            // Create payment directly without rating first
            const paymentRes = await fetch('/api/booking-payment/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    bookingId: bookingId,
                    // Don't include rating and feedback - they'll be collected after payment
                })
            });
            
            if (paymentRes.ok) {
                const paymentResult = await paymentRes.json();
                // Redirect to payment page
                window.location.href = paymentResult.redirectUrl;
            } else {
                const error = await paymentRes.json();
                alert('Failed to create payment: ' + (error.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Payment creation error:', error);
            alert('Failed to create payment. Please try again.');
        }
    }
</script>