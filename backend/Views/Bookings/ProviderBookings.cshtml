@model List<ServConnect.Models.Booking>
@{
    ViewData["Title"] = "Incoming Bookings";
}
<div class="container py-4">
    <h2 class="mb-3">Incoming Bookings</h2>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info">No booking requests yet.</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Contact</th>
                        <th>Address</th>
                        <th>Service</th>
                        <th>Price</th>
                        <th>Date & Time</th>
                        <th>Booking Status</th>
                        <th>Service Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var b in Model)
                    {
                        <tr>
                            <td>
                                <div class="fw-semibold">@b.UserName</div>
                                <div class="text-muted small">@b.UserEmail</div>
                            </td>
                            <td>@b.ContactPhone</td>
                            <td>@b.Address</td>
                            <td>
                                <div class="fw-semibold">@b.ServiceName</div>
                                <div class="text-muted small">Req: @b.RequestedAtUtc.ToLocalTime().ToString("g")</div>
                            </td>
                            <td>
                                @if (b.Price > 0)
                                {
                                    <span>@b.Currency @b.Price.ToString("F2") @b.PriceUnit</span>
                                }
                                else
                                {
                                    <span class="text-muted">Price on request</span>
                                }
                            </td>
                            <td>@b.ServiceDateTime.ToLocalTime().ToString("f")</td>
                            <td>
                                @switch (b.Status)
                                {
                                    case ServConnect.Models.BookingStatus.Pending:
                                        <span class="badge bg-warning text-dark">Pending</span>
                                        break;
                                    case ServConnect.Models.BookingStatus.Accepted:
                                        <span class="badge bg-success">Accepted</span>
                                        break;
                                    case ServConnect.Models.BookingStatus.Rejected:
                                        <span class="badge bg-danger">Rejected</span>
                                        break;
                                }
                                @if (!string.IsNullOrWhiteSpace(b.ProviderMessage))
                                {
                                    <div class="small text-muted">"@b.ProviderMessage"</div>
                                }
                            </td>
                            <td>
                                @switch (b.ServiceStatus)
                                {
                                    case ServConnect.Models.ServiceStatus.NotStarted:
                                        <span class="badge bg-secondary">Not Started</span>
                                        break;
                                    case ServConnect.Models.ServiceStatus.InProgress:
                                        <span class="badge bg-primary">In Progress</span>
                                        @if (b.ServiceStartedAt.HasValue)
                                        {
                                            <div class="small text-muted">Started: @b.ServiceStartedAt.Value.ToLocalTime().ToString("g")</div>
                                        }
                                        break;
                                    case ServConnect.Models.ServiceStatus.Completed:
                                        <span class="badge bg-success">Completed</span>
                                        @if (b.ServiceCompletedAt.HasValue)
                                        {
                                            <div class="small text-muted">Completed: @b.ServiceCompletedAt.Value.ToLocalTime().ToString("g")</div>
                                        }
                                        break;
                                    case ServConnect.Models.ServiceStatus.Cancelled:
                                        <span class="badge bg-danger">Cancelled</span>
                                        break;
                                }
                            </td>
                            <td>
                                @if (b.Status == ServConnect.Models.BookingStatus.Pending)
                                {
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-success" onclick="decide('@b.Id', true)"><i class="fas fa-check me-1"></i>Accept</button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="decide('@b.Id', false)"><i class="fas fa-times me-1"></i>Reject</button>
                                    </div>
                                }
                                else if (b.Status == ServConnect.Models.BookingStatus.Accepted)
                                {
                                    @if (b.ServiceStatus == ServConnect.Models.ServiceStatus.NotStarted)
                                    {
                                        <div class="d-flex gap-2 flex-wrap">
                                            <button class="btn btn-sm btn-primary" onclick="startService('@b.Id')">
                                                <i class="fas fa-play me-1"></i>Start Service
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" onclick="transferService('@b.Id', '@b.ProviderServiceId')">
                                                <i class="fas fa-exchange-alt me-1"></i>Transfer
                                            </button>
                                        </div>
                                    }
                                    else if (b.ServiceStatus == ServConnect.Models.ServiceStatus.InProgress)
                                    {
                                        <button class="btn btn-sm btn-warning" onclick="stopService('@b.Id')">
                                            <i class="fas fa-stop me-1"></i>Stop Service
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted small">Service completed</span>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted small">No actions</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
<script>
async function decide(bookingId, accept) {
    const message = prompt(accept ? 'Optional message to user (Accept):' : 'Optional message to user (Reject):') || '';
    const res = await fetch('/api/bookings/decision', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ bookingId, accept, message })
    });
    if (res.ok) {
        location.reload();
    } else {
        alert('Failed to update booking.');
    }
}

async function startService(bookingId) {
    try {
        // First, generate OTP for the user
        const res = await fetch(`/api/bookings/${bookingId}/start-service`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        if (res.ok) {
            const result = await res.json();
            alert(result.message);
            
            // Now ask for OTP from user
            const otpCode = prompt('Please ask the customer for their 6-digit service code:');
            if (otpCode && otpCode.length === 6) {
                await verifyAndStart(bookingId, otpCode);
            }
        } else {
            const error = await res.json();
            alert('Failed to start service: ' + (error.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Start service error:', error);
        alert('Failed to start service. Please try again.');
    }
}

async function verifyAndStart(bookingId, otpCode) {
    try {
        const res = await fetch(`/api/bookings/${bookingId}/verify-start`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ otpCode })
        });
        
        if (res.ok) {
            const result = await res.json();
            alert(result.message);
            location.reload();
        } else {
            const error = await res.json();
            alert('Failed to verify code: ' + (error.error || 'Invalid or expired code'));
        }
    } catch (error) {
        console.error('Verify OTP error:', error);
        alert('Failed to verify code. Please try again.');
    }
}

async function stopService(bookingId) {
    if (!confirm('Are you sure you want to stop this service? This will mark it as completed.')) {
        return;
    }
    
    try {
        const res = await fetch(`/api/bookings/${bookingId}/stop-service`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        if (res.ok) {
            const result = await res.json();
            alert(result.message);
            location.reload();
        } else {
            const error = await res.json();
            alert('Failed to stop service: ' + (error.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Stop service error:', error);
        alert('Failed to stop service. Please try again.');
    }
}

async function transferService(bookingId, providerServiceId) {
    try {
        console.log(`[DEBUG] Fetching available providers for service: ${providerServiceId}`);
        
        // First, get available providers for this service
        const res = await fetch(`/api/bookings/transfer/available-providers/${providerServiceId}`);
        
        console.log(`[DEBUG] Response status: ${res.status}`);
        
        if (!res.ok) {
            const errorData = await res.json().catch(() => ({ error: 'Unknown error' }));
            console.error('[ERROR] API response:', errorData);
            alert(`Failed to load available providers: ${errorData.error || 'Unknown error'}\nDetails: ${errorData.details || 'No details available'}`);
            return;
        }
        
        const providers = await res.json();
        console.log(`[DEBUG] Found ${providers.length} available providers:`, providers);
        
        if (providers.length === 0) {
            alert('No other providers available for this service');
            return;
        }
        
        // Show transfer modal
        showTransferModal(bookingId, providers);
    } catch (error) {
        console.error('Transfer service error:', error);
        alert(`Failed to load transfer options: ${error.message}\nPlease try again.`);
    }
}

function showTransferModal(bookingId, providers) {
    // Create modal HTML
    const modalHtml = `
        <div class="modal fade" id="transferModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Transfer Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Select a provider to transfer this service to:</p>
                        <div class="mb-3">
                            <label class="form-label">Available Providers:</label>
                            <select class="form-select" id="newProviderId">
                                <option value="">Select a provider...</option>
                                ${providers.map(p => `
                                    <option value="${p.providerId}" data-name="${p.providerName}">
                                        ${p.providerName} - ${p.currency} ${p.price} ${p.priceUnit}
                                    </option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Reason for Transfer (Optional):</label>
                            <textarea class="form-control" id="transferReason" rows="3" placeholder="Explain why you need to transfer this service..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitTransfer('${bookingId}')">Send Transfer Request</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove existing modal if any
    const existingModal = document.getElementById('transferModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Add modal to page
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('transferModal'));
    modal.show();
}

async function submitTransfer(bookingId) {
    const newProviderId = document.getElementById('newProviderId').value;
    const transferReason = document.getElementById('transferReason').value;
    
    if (!newProviderId) {
        alert('Please select a provider');
        return;
    }
    
    try {
        const res = await fetch('/api/bookings/transfer/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                bookingId: bookingId,
                newProviderId: newProviderId,
                transferReason: transferReason
            })
        });
        
        if (res.ok) {
            const result = await res.json();
            alert('Transfer request sent successfully! The customer will be notified to approve or reject the transfer.');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('transferModal'));
            modal.hide();
            
            // Reload page to show updated status
            location.reload();
        } else {
            const error = await res.json();
            alert('Failed to create transfer request: ' + (error.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Submit transfer error:', error);
        alert('Failed to submit transfer request. Please try again.');
    }
}
</script>
}