@model IEnumerable<ServConnect.Models.ProviderService>
@{
    ViewData["Title"] = "Manage Services";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Services</h2>
        <a asp-controller="Admin" asp-action="Dashboard" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <div class="card">
        <div class="card-header d-flex align-items-center justify-content-between">
            <span><i class="fas fa-cogs me-2"></i> All Provider Services</span>
            <div class="d-flex gap-2">
                <select id="statusFilter" class="form-select" style="min-width: 150px;">
                    <option value="">All Services</option>
                    <option value="active">Active Only</option>
                    <option value="inactive">Inactive Only</option>
                </select>
                <input id="serviceSearch" type="text" class="form-control" placeholder="Search services..." style="min-width: 220px;">
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Service Name</th>
                            <th>Provider</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Rating</th>
                            <th>Created</th>
                            <th style="width: 250px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="servicesTableBody">
                        <tr>
                            <td colspan="7" class="text-center text-muted">Loading services...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Edit Service Modal -->
    <div class="modal fade" id="editServiceModal" tabindex="-1" aria-labelledby="editServiceModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editServiceModalLabel">Edit Service</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editServiceForm">
                        <input type="hidden" id="editServiceId">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editServiceName" class="form-label">Service Name</label>
                                    <input type="text" class="form-control" id="editServiceName" readonly>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editProviderName" class="form-label">Provider Name</label>
                                    <input type="text" class="form-control" id="editProviderName" readonly>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" rows="3"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="editPrice" class="form-label">Price</label>
                                    <input type="number" class="form-control" id="editPrice" step="0.01" min="0">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="editPriceUnit" class="form-label">Price Unit</label>
                                    <select class="form-select" id="editPriceUnit">
                                        <option value="per service">Per Service</option>
                                        <option value="per hour">Per Hour</option>
                                        <option value="per day">Per Day</option>
                                        <option value="per job">Per Job</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="editCurrency" class="form-label">Currency</label>
                                    <select class="form-select" id="editCurrency">
                                        <option value="USD">USD</option>
                                        <option value="EUR">EUR</option>
                                        <option value="INR">INR</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editAvailableHours" class="form-label">Available Hours</label>
                            <input type="text" class="form-control" id="editAvailableHours" placeholder="e.g., 9:00 AM - 6:00 PM">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveServiceChanges">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allServices = [];

        async function loadServices() {
            const tbody = document.getElementById('servicesTableBody');
            tbody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Loading services...</td></tr>`;
            try {
                const res = await fetch('/api/admin/services', { credentials: 'same-origin' });
                if (!res.ok) throw new Error('Failed to load');
                allServices = await res.json();
                renderServices(allServices);
            } catch (err) {
                tbody.innerHTML = `<tr><td colspan="7" class="text-danger text-center">Error loading services</td></tr>`;
            }
        }

        function renderServices(services) {
            const tbody = document.getElementById('servicesTableBody');
            if (!services || services.length === 0) {
                tbody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">No services found.</td></tr>`;
                return;
            }
            tbody.innerHTML = '';
            services.forEach(s => {
                const tr = document.createElement('tr');
                const statusBadge = s.isActive && s.isAvailable ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-danger">Inactive</span>';
                const rating = s.reviewCount > 0 ? 
                    `${s.rating.toFixed(1)} ‚≠ê (${s.reviewCount})` : 
                    'No reviews';
                
                tr.innerHTML = `
                    <td><strong>${s.serviceName}</strong></td>
                    <td>
                        <div>${s.providerName}</div>
                        <small class="text-muted">${s.providerEmail}</small>
                    </td>
                    <td>${s.price} ${s.currency} ${s.priceUnit}</td>
                    <td>${statusBadge}</td>
                    <td>${rating}</td>
                    <td>${new Date(s.createdAt).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-edit" data-id="${s.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm ${s.isActive ? 'btn-warning' : 'btn-success'} btn-toggle-suspend" 
                                data-id="${s.id}" data-active="${s.isActive}">
                            <i class="fas ${s.isActive ? 'fa-pause' : 'fa-play'}"></i> 
                            ${s.isActive ? 'Suspend' : 'Activate'}
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-delete" data-id="${s.id}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>`;
                tbody.appendChild(tr);
            });

            // Wire edit buttons
            tbody.querySelectorAll('.btn-edit').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.currentTarget.getAttribute('data-id');
                    const service = allServices.find(s => s.id === id);
                    if (service) {
                        openEditModal(service);
                    }
                });
            });

            // Wire suspend/activate buttons
            tbody.querySelectorAll('.btn-toggle-suspend').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const b = e.currentTarget;
                    const id = b.getAttribute('data-id');
                    const isActive = b.getAttribute('data-active') === 'true';
                    b.disabled = true;
                    try {
                        const res = await fetch(`/api/admin/services/${id}/suspend?suspend=${isActive}`, {
                            method: 'POST',
                            credentials: 'same-origin'
                        });
                        if (res.ok) {
                            // Reload services to reflect changes
                            await loadServices();
                        } else {
                            alert('Failed to update service status');
                        }
                    } catch {
                        alert('Failed to update service status');
                    } finally {
                        b.disabled = false;
                    }
                });
            });

            // Wire delete buttons
            tbody.querySelectorAll('.btn-delete').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.currentTarget.getAttribute('data-id');
                    const service = allServices.find(s => s.id === id);
                    if (!confirm(`Delete service "${service?.serviceName}" by ${service?.providerName}? This action cannot be undone.`)) return;
                    e.currentTarget.disabled = true;
                    try {
                        const res = await fetch(`/api/admin/services/${id}`, {
                            method: 'DELETE',
                            credentials: 'same-origin'
                        });
                        if (res.ok || res.status === 404) {
                            const row = e.currentTarget.closest('tr');
                            if (row) row.remove();
                            // Remove from local array
                            allServices = allServices.filter(s => s.id !== id);
                        } else {
                            alert('Failed to delete service');
                        }
                    } catch {
                        alert('Failed to delete service');
                    } finally {
                        e.currentTarget.disabled = false;
                    }
                });
            });
        }

        function openEditModal(service) {
            document.getElementById('editServiceId').value = service.id;
            document.getElementById('editServiceName').value = service.serviceName;
            document.getElementById('editProviderName').value = service.providerName;
            document.getElementById('editDescription').value = service.description || '';
            document.getElementById('editPrice').value = service.price;
            document.getElementById('editPriceUnit').value = service.priceUnit;
            document.getElementById('editCurrency').value = service.currency;
            document.getElementById('editAvailableHours').value = service.availableHours || '';
            
            const modal = new bootstrap.Modal(document.getElementById('editServiceModal'));
            modal.show();
        }

        // Search functionality
        document.getElementById('serviceSearch').addEventListener('input', (e) => {
            const q = e.target.value.toLowerCase();
            filterServices();
        });

        // Status filter functionality
        document.getElementById('statusFilter').addEventListener('change', (e) => {
            filterServices();
        });

        function filterServices() {
            const searchQuery = document.getElementById('serviceSearch').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            
            let filtered = allServices;
            
            // Apply search filter
            if (searchQuery) {
                filtered = filtered.filter(s => 
                    s.serviceName.toLowerCase().includes(searchQuery) ||
                    s.providerName.toLowerCase().includes(searchQuery) ||
                    s.providerEmail.toLowerCase().includes(searchQuery)
                );
            }
            
            // Apply status filter
            if (statusFilter === 'active') {
                filtered = filtered.filter(s => s.isActive && s.isAvailable);
            } else if (statusFilter === 'inactive') {
                filtered = filtered.filter(s => !s.isActive || !s.isAvailable);
            }
            
            renderServices(filtered);
        }

        // Save service changes
        document.getElementById('saveServiceChanges').addEventListener('click', async () => {
            const id = document.getElementById('editServiceId').value;
            const saveBtn = document.getElementById('saveServiceChanges');
            
            const data = {
                description: document.getElementById('editDescription').value,
                price: parseFloat(document.getElementById('editPrice').value),
                priceUnit: document.getElementById('editPriceUnit').value,
                currency: document.getElementById('editCurrency').value,
                availableHours: document.getElementById('editAvailableHours').value,
                availableDays: [] // Could be extended to include day selection
            };
            
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';
            
            try {
                const res = await fetch(`/api/admin/services/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                });
                
                if (res.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editServiceModal'));
                    modal.hide();
                    // Reload services to reflect changes
                    await loadServices();
                    alert('Service updated successfully!');
                } else {
                    alert('Failed to update service. Please try again.');
                }
            } catch (err) {
                alert('Failed to update service. Please check your connection.');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save Changes';
            }
        });

        document.addEventListener('DOMContentLoaded', loadServices);
    </script>
</div>
