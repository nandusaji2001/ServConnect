@model IEnumerable<ServConnect.Models.Users>
@{
    ViewData["Title"] = "Manage Users";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Users</h2>
        <a asp-controller="Admin" asp-action="Dashboard" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <div class="card">
        <div class="card-header d-flex align-items-center justify-content-between">
            <span><i class="fas fa-users me-2"></i> All Users</span>
            <input id="userSearch" type="text" class="form-control w-auto" placeholder="Search..." style="min-width: 220px;">
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th style="width: 180px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <tr>
                            <td colspan="4" class="text-center text-muted">Loading users...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <script>
            async function loadUsers() {
                const tbody = document.getElementById('usersTableBody');
                tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">Loading users...</td></tr>`;
                try {
                    const res = await fetch('/api/admin/users', { credentials: 'same-origin' });
                    if (!res.ok) throw new Error('Failed to load');
                    let users = await res.json();
                    // Apply suspended filter from query if present
                    const url = new URL(window.location.href);
                    const suspendedParam = url.searchParams.get('suspended');
                    if (suspendedParam === 'true') {
                        users = users.filter(u => u.suspended);
                    }
                    renderUsers(users);
                } catch (err) {
                    tbody.innerHTML = `<tr><td colspan="4" class="text-danger text-center">Error loading users</td></tr>`;
                }
            }

            function renderUsers(users) {
                const tbody = document.getElementById('usersTableBody');
                if (!users || users.length === 0) {
                    tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No users found.</td></tr>`;
                    return;
                }
                tbody.innerHTML = '';
                users.forEach(u => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${u.fullName || ''}</td>
                        <td>${u.email || ''}</td>
                        <td>${u.phoneNumber || ''}</td>
                        <td>
                            ${u.isAdmin ? '' : `
                            <a class=\"btn btn-sm btn-outline-primary\" href=\"/Admin/UserDetails/${u.id}\">
                                <i class=\"fas fa-eye\"></i> View
                            </a>
                            <button class=\"btn btn-sm ${u.suspended ? 'btn-success' : 'btn-warning'} btn-toggle-suspend\" data-id=\"${u.id}\" data-suspended=\"${u.suspended}\">
                                <i class=\"fas ${u.suspended ? 'fa-unlock' : 'fa-user-slash'}\"></i> ${u.suspended ? 'Unsuspend' : 'Suspend'}
                            </button>
                            <button class=\"btn btn-sm btn-outline-danger\" data-id=\"${u.id}\">
                                <i class=\"fas fa-trash\"></i> Delete
                            </button>
                            `}
                        </td>`;
                    tbody.appendChild(tr);
                });

                // Wire suspend/unsuspend buttons
                tbody.querySelectorAll('.btn-toggle-suspend').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        const b = e.currentTarget;
                        const id = b.getAttribute('data-id');
                        const suspended = b.getAttribute('data-suspended') === 'true';
                        b.disabled = true;
                        try {
                            const res = await fetch(`/api/admin/users/${id}/suspend?suspend=${!suspended}`, {
                                method: 'POST',
                                credentials: 'same-origin'
                            });
                            if (res.ok) {
                                // Toggle UI
                                b.setAttribute('data-suspended', String(!suspended));
                                b.classList.toggle('btn-warning', suspended);
                                b.classList.toggle('btn-success', !suspended);
                                b.innerHTML = `<i class="fas ${suspended ? 'fa-user-slash' : 'fa-unlock'}"></i> ${suspended ? 'Suspend' : 'Unsuspend'}`;
                            } else {
                                alert('Failed to update suspension');
                            }
                        } catch {
                            alert('Failed to update suspension');
                        } finally {
                            b.disabled = false;
                        }
                    });
                });

                // Wire delete buttons
                tbody.querySelectorAll('button[data-id]:not(.btn-toggle-suspend)').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        const id = e.currentTarget.getAttribute('data-id');
                        if (!confirm('Delete this user? This action cannot be undone.')) return;
                        e.currentTarget.disabled = true;
                        try {
                            const res = await fetch(`/api/admin/users/${id}`, {
                                method: 'DELETE',
                                credentials: 'same-origin'
                            });
                            if (res.status === 204) {
                                e.currentTarget.closest('tr').remove();
                            } else {
                                alert('Failed to delete user');
                            }
                        } catch {
                            alert('Failed to delete user');
                        } finally {
                            e.currentTarget.disabled = false;
                        }
                    });
                });
            }

            // Simple search filter
            document.getElementById('userSearch').addEventListener('input', (e) => {
                const q = e.target.value.toLowerCase();
                const rows = document.querySelectorAll('#usersTableBody tr');
                rows.forEach(r => {
                    const t = r.textContent.toLowerCase();
                    r.style.display = t.includes(q) ? '' : 'none';
                });
            });

            document.addEventListener('DOMContentLoaded', loadUsers);
        </script>
    </div>
</div>

<script>
    async function loadUsers() {
        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">Loading users...</td></tr>`;
        try {
            const res = await fetch('/api/admin/users', { credentials: 'same-origin' });
            if (!res.ok) throw new Error('Failed to load');
            let users = await res.json();
            const url = new URL(window.location.href);
            const suspendedParam = url.searchParams.get('suspended');
            if (suspendedParam === 'true') {
                users = users.filter(u => u.suspended);
            }
            renderUsers(users);
        } catch (err) {
            tbody.innerHTML = `<tr><td colspan="4" class="text-danger text-center">Error loading users</td></tr>`;
        }
    }

    function renderUsers(users) {
        const tbody = document.getElementById('usersTableBody');
        if (!users || users.length === 0) {
            tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No users found.</td></tr>`;
            return;
        }
        tbody.innerHTML = '';
        users.forEach(u => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${u.fullName || ''}</td>
                <td>${u.email || ''}</td>
                <td>${u.phoneNumber || ''}</td>
                <td>
                    ${u.isAdmin ? '' : `
                    <a class=\"btn btn-sm btn-outline-primary\" href=\"/Admin/UserDetails/${u.id}\">
                        <i class=\"fas fa-eye\"></i> View
                    </a>
                    <button class=\"btn btn-sm ${u.suspended ? 'btn-success' : 'btn-warning'} btn-toggle-suspend\" data-id=\"${u.id}\" data-suspended=\"${u.suspended}\">
                        <i class=\"fas ${u.suspended ? 'fa-unlock' : 'fa-user-slash'}\"></i> ${u.suspended ? 'Unsuspend' : 'Suspend'}
                    </button>
                    <button class=\"btn btn-sm btn-outline-danger\" data-id=\"${u.id}\">
                        <i class=\"fas fa-trash\"></i> Delete
                    </button>
                    `}
                </td>`;
            tbody.appendChild(tr);
        });

        // Wire suspend/unsuspend buttons
        tbody.querySelectorAll('.btn-toggle-suspend').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const b = e.currentTarget;
                const id = b.getAttribute('data-id');
                const suspended = b.getAttribute('data-suspended') === 'true';
                b.disabled = true;
                try {
                    const res = await fetch(`/api/admin/users/${id}/suspend?suspend=${!suspended}`, {
                        method: 'POST',
                        credentials: 'same-origin'
                    });
                    if (res.ok) {
                        b.setAttribute('data-suspended', String(!suspended));
                        b.classList.toggle('btn-warning', suspended);
                        b.classList.toggle('btn-success', !suspended);
                        b.innerHTML = `<i class=\"fas ${suspended ? 'fa-user-slash' : 'fa-unlock'}\"></i> ${suspended ? 'Suspend' : 'Unsuspend'}`;
                    }
                } catch {
                } finally {
                    b.disabled = false;
                }
            });
        });

        // Wire delete buttons
        tbody.querySelectorAll('button[data-id]:not(.btn-toggle-suspend)').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const id = e.currentTarget.getAttribute('data-id');
                if (!confirm('Delete this user? This action cannot be undone.')) return;
                e.currentTarget.disabled = true;
                try {
                    const res = await fetch(`/api/admin/users/${id}`, {
                        method: 'DELETE',
                        credentials: 'same-origin'
                    });
                    if (res.status === 204) {
                        e.currentTarget.closest('tr').remove();
                    } else {
                        alert('Failed to delete user');
                    }
                } catch {
                    alert('Failed to delete user');
                } finally {
                    e.currentTarget.disabled = false;
                }
            });
        });
    }

    // Simple search filter
    document.getElementById('userSearch').addEventListener('input', (e) => {
        const q = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('#usersTableBody tr');
        rows.forEach(r => {
            const t = r.textContent.toLowerCase();
            r.style.display = t.includes(q) ? '' : 'none';
        });
    });

    document.addEventListener('DOMContentLoaded', loadUsers);
</script>