@{
    ViewData["Title"] = "Upload Advertisement";
}

<div class="container py-4" style="max-width:900px;">
    <h3 class="mb-3">Upload Advertisement</h3>
    <p class="text-muted">Choose advertisement type, upload your banner image and crop it to fit. No payment required - advertisement will be published immediately.</p>

    <form asp-controller="Admin" asp-action="CreateAd" method="post" enctype="multipart/form-data" class="card p-4">
        <!-- Advertisement Type Selection -->
        <div class="mb-4">
            <label class="form-label fw-bold">Advertisement Type</label>
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="ad-type-card" data-type="0">
                        <input type="radio" name="adType" value="0" id="bottomPage" checked class="d-none">
                        <label for="bottomPage" class="ad-type-label">
                            <div class="ad-type-preview">
                                <div class="ad-preview-box" style="width: 200px; height: 25px; background: #f8f9fa; border: 2px dashed #dee2e6; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; color: #6c757d;">
                                    728 x 90 px
                                </div>
                            </div>
                            <h6 class="mt-2 mb-1">Bottom Page Advertisement</h6>
                            <small class="text-muted">Displayed at the bottom of pages</small>
                        </label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="ad-type-card" data-type="1">
                        <input type="radio" name="adType" value="1" id="heroBanner" class="d-none">
                        <label for="heroBanner" class="ad-type-label">
                            <div class="ad-type-preview">
                                <div class="ad-preview-box" style="width: 200px; height: 60px; background: #f8f9fa; border: 2px dashed #dee2e6; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; color: #6c757d;">
                                    600 x 180 px
                                </div>
                            </div>
                            <h6 class="mt-2 mb-1">Hero Banner Advertisement</h6>
                            <small class="text-muted">Displayed in the hero section</small>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Image Upload with Simple Cropper -->
        <div class="mb-4">
            <label for="image" class="form-label fw-bold">Ad Image</label>
            <input type="file" class="form-control" id="image" name="image" accept="image/*" required />
            <div class="mt-2">
                <small class="text-muted">Upload an image and use the crop tool below to select the area for your advertisement.</small>
            </div>
            <span class="text-danger">@Html.ValidationMessage("image")</span>
            
            <!-- Simple Image Cropper -->
            <div id="cropperContainer" class="mt-3" style="display: none;">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Crop Your Image</h6>
                        <small class="text-muted">Drag the corners to resize the crop area</small>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div id="imageContainer" style="position: relative; display: inline-block; max-width: 100%;">
                                    <img id="previewImage" style="max-width: 100%; height: auto; display: block;" />
                                    <div id="cropBox" style="position: absolute; border: 2px solid #007bff; background: rgba(0,123,255,0.1); cursor: move; min-width: 50px; min-height: 30px; display: none;">
                                        <div class="resize-handle" data-direction="nw" style="position: absolute; top: -5px; left: -5px; width: 10px; height: 10px; background: #007bff; cursor: nw-resize;"></div>
                                        <div class="resize-handle" data-direction="ne" style="position: absolute; top: -5px; right: -5px; width: 10px; height: 10px; background: #007bff; cursor: ne-resize;"></div>
                                        <div class="resize-handle" data-direction="sw" style="position: absolute; bottom: -5px; left: -5px; width: 10px; height: 10px; background: #007bff; cursor: sw-resize;"></div>
                                        <div class="resize-handle" data-direction="se" style="position: absolute; bottom: -5px; right: -5px; width: 10px; height: 10px; background: #007bff; cursor: se-resize;"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Preview</h6>
                                    </div>
                                    <div class="card-body text-center">
                                        <canvas id="previewCanvas" style="border: 1px solid #dee2e6; max-width: 100%;"></canvas>
                                        <div class="mt-2">
                                            <small class="text-muted">Final advertisement preview</small>
                                        </div>
                                        <button type="button" id="resetCrop" class="btn btn-sm btn-outline-secondary mt-2">Reset</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="targetUrl" class="form-label fw-bold">Destination URL (Optional)</label>
            <input type="url" class="form-control" id="targetUrl" name="targetUrl" placeholder="https://maps.google.com/..." />
            <small class="text-muted">Where users will be redirected when they click your advertisement.</small>
        </div>

        <!-- Hidden fields for crop coordinates -->
        <input type="hidden" id="cropX" name="cropX" />
        <input type="hidden" id="cropY" name="cropY" />
        <input type="hidden" id="cropWidth" name="cropWidth" />
        <input type="hidden" id="cropHeight" name="cropHeight" />

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary"><i class="bi bi-cloud-upload"></i> Upload Advertisement</button>
            <a class="btn btn-secondary" asp-controller="Admin" asp-action="Advertisements">Cancel</a>
        </div>
    </form>
</div>

<style>
    .ad-type-card {
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        height: 100%;
    }

    .ad-type-card:hover {
        border-color: #0d6efd;
        background-color: #f8f9ff;
    }

    .ad-type-card.selected {
        border-color: #0d6efd;
        background-color: #e7f1ff;
    }

    .ad-type-label {
        cursor: pointer;
        margin: 0;
        display: block;
        width: 100%;
        height: 100%;
    }

    .ad-type-preview {
        display: flex;
        justify-content: center;
        margin-bottom: 10px;
    }

    .ad-preview-box {
        border-radius: 4px;
    }

    .resize-handle {
        border-radius: 50%;
    }

    .resize-handle:hover {
        background: #0056b3 !important;
    }
</style>

<script>
    let currentAdType = 0;
    let imageLoaded = false;
    let cropBox = null;
    let previewImage = null;
    let previewCanvas = null;
    let previewCtx = null;
    let isDragging = false;
    let isResizing = false;
    let resizeDirection = '';
    let startX = 0, startY = 0;
    let originalCropBox = {};

    // Handle advertisement type selection
    document.querySelectorAll('input[name="adType"]').forEach(radio => {
        radio.addEventListener('change', function() {
            currentAdType = parseInt(this.value);
            
            // Update visual selection
            document.querySelectorAll('.ad-type-card').forEach(card => {
                card.classList.remove('selected');
            });
            this.closest('.ad-type-card').classList.add('selected');
            
            // Reset crop if image is loaded
            if (imageLoaded) {
                resetCrop();
            }
        });
    });

    // Initialize first option as selected
    document.querySelector('.ad-type-card[data-type="0"]').classList.add('selected');

    // Handle image upload
    document.getElementById('image').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewImage = document.getElementById('previewImage');
                previewImage.src = e.target.result;
                previewImage.onload = function() {
                    imageLoaded = true;
                    initializeCropper();
                    document.getElementById('cropperContainer').style.display = 'block';
                };
            };
            reader.readAsDataURL(file);
        }
    });

    function initializeCropper() {
        cropBox = document.getElementById('cropBox');
        previewCanvas = document.getElementById('previewCanvas');
        previewCtx = previewCanvas.getContext('2d');
        
        // Set up crop box
        resetCrop();
        
        // Add event listeners
        cropBox.addEventListener('mousedown', startDrag);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', endDrag);
        
        // Add resize handle listeners
        document.querySelectorAll('.resize-handle').forEach(handle => {
            handle.addEventListener('mousedown', startResize);
        });
    }

    function resetCrop() {
        if (!previewImage || !cropBox) return;
        
        const imageRect = previewImage.getBoundingClientRect();
        const containerRect = document.getElementById('imageContainer').getBoundingClientRect();
        
        // Calculate crop box dimensions based on ad type
        const dimensions = getAdDimensions();
        const aspectRatio = dimensions.width / dimensions.height;
        
        // Calculate optimal crop box size
        let cropWidth = imageRect.width * 0.6;
        let cropHeight = cropWidth / aspectRatio;
        
        if (cropHeight > imageRect.height * 0.8) {
            cropHeight = imageRect.height * 0.8;
            cropWidth = cropHeight * aspectRatio;
        }
        
        // Center the crop box
        const left = (imageRect.width - cropWidth) / 2;
        const top = (imageRect.height - cropHeight) / 2;
        
        cropBox.style.left = left + 'px';
        cropBox.style.top = top + 'px';
        cropBox.style.width = cropWidth + 'px';
        cropBox.style.height = cropHeight + 'px';
        cropBox.style.display = 'block';
        
        updatePreview();
        updateHiddenFields();
    }

    function startDrag(e) {
        if (e.target.classList.contains('resize-handle')) return;
        
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        
        const rect = cropBox.getBoundingClientRect();
        originalCropBox = {
            left: parseInt(cropBox.style.left),
            top: parseInt(cropBox.style.top)
        };
        
        e.preventDefault();
    }

    function startResize(e) {
        isResizing = true;
        resizeDirection = e.target.dataset.direction;
        startX = e.clientX;
        startY = e.clientY;
        
        originalCropBox = {
            left: parseInt(cropBox.style.left),
            top: parseInt(cropBox.style.top),
            width: parseInt(cropBox.style.width),
            height: parseInt(cropBox.style.height)
        };
        
        e.preventDefault();
        e.stopPropagation();
    }

    function drag(e) {
        if (isDragging) {
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            let newLeft = originalCropBox.left + deltaX;
            let newTop = originalCropBox.top + deltaY;
            
            // Keep within image bounds
            const imageRect = previewImage.getBoundingClientRect();
            const containerRect = document.getElementById('imageContainer').getBoundingClientRect();
            
            newLeft = Math.max(0, Math.min(newLeft, imageRect.width - parseInt(cropBox.style.width)));
            newTop = Math.max(0, Math.min(newTop, imageRect.height - parseInt(cropBox.style.height)));
            
            cropBox.style.left = newLeft + 'px';
            cropBox.style.top = newTop + 'px';
            
            updatePreview();
            updateHiddenFields();
        }
        
        if (isResizing) {
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            const dimensions = getAdDimensions();
            const aspectRatio = dimensions.width / dimensions.height;
            
            let newWidth = originalCropBox.width;
            let newHeight = originalCropBox.height;
            let newLeft = originalCropBox.left;
            let newTop = originalCropBox.top;
            
            // Calculate new dimensions based on resize direction
            if (resizeDirection.includes('e')) {
                newWidth = originalCropBox.width + deltaX;
            }
            if (resizeDirection.includes('w')) {
                newWidth = originalCropBox.width - deltaX;
                newLeft = originalCropBox.left + deltaX;
            }
            if (resizeDirection.includes('s')) {
                newHeight = originalCropBox.height + deltaY;
            }
            if (resizeDirection.includes('n')) {
                newHeight = originalCropBox.height - deltaY;
                newTop = originalCropBox.top + deltaY;
            }
            
            // Maintain aspect ratio
            if (newWidth / aspectRatio !== newHeight) {
                if (Math.abs(deltaX) > Math.abs(deltaY)) {
                    newHeight = newWidth / aspectRatio;
                    if (resizeDirection.includes('n')) {
                        newTop = originalCropBox.top + originalCropBox.height - newHeight;
                    }
                } else {
                    newWidth = newHeight * aspectRatio;
                    if (resizeDirection.includes('w')) {
                        newLeft = originalCropBox.left + originalCropBox.width - newWidth;
                    }
                }
            }
            
            // Keep within bounds
            const imageRect = previewImage.getBoundingClientRect();
            newWidth = Math.max(50, Math.min(newWidth, imageRect.width - newLeft));
            newHeight = Math.max(30, Math.min(newHeight, imageRect.height - newTop));
            newLeft = Math.max(0, Math.min(newLeft, imageRect.width - newWidth));
            newTop = Math.max(0, Math.min(newTop, imageRect.height - newHeight));
            
            cropBox.style.width = newWidth + 'px';
            cropBox.style.height = newHeight + 'px';
            cropBox.style.left = newLeft + 'px';
            cropBox.style.top = newTop + 'px';
            
            updatePreview();
            updateHiddenFields();
        }
    }

    function endDrag() {
        isDragging = false;
        isResizing = false;
        resizeDirection = '';
    }

    function updatePreview() {
        if (!previewImage || !previewCanvas || !cropBox) return;
        
        const imageRect = previewImage.getBoundingClientRect();
        const containerRect = document.getElementById('imageContainer').getBoundingClientRect();
        
        // Get crop box position relative to image
        const cropLeft = parseInt(cropBox.style.left);
        const cropTop = parseInt(cropBox.style.top);
        const cropWidth = parseInt(cropBox.style.width);
        const cropHeight = parseInt(cropBox.style.height);
        
        // Calculate source coordinates on the actual image
        const scaleX = previewImage.naturalWidth / imageRect.width;
        const scaleY = previewImage.naturalHeight / imageRect.height;
        
        const sourceX = cropLeft * scaleX;
        const sourceY = cropTop * scaleY;
        const sourceWidth = cropWidth * scaleX;
        const sourceHeight = cropHeight * scaleY;
        
        // Set preview canvas size
        const dimensions = getAdDimensions();
        const previewScale = Math.min(200 / dimensions.width, 150 / dimensions.height);
        previewCanvas.width = dimensions.width * previewScale;
        previewCanvas.height = dimensions.height * previewScale;
        
        // Draw cropped area to preview
        previewCtx.clearRect(0, 0, previewCanvas.width, previewCanvas.height);
        previewCtx.drawImage(
            previewImage,
            sourceX, sourceY, sourceWidth, sourceHeight,
            0, 0, previewCanvas.width, previewCanvas.height
        );
    }

    function updateHiddenFields() {
        if (!previewImage || !cropBox) return;
        
        const imageRect = previewImage.getBoundingClientRect();
        
        // Get crop box position relative to image
        const cropLeft = parseInt(cropBox.style.left);
        const cropTop = parseInt(cropBox.style.top);
        const cropWidth = parseInt(cropBox.style.width);
        const cropHeight = parseInt(cropBox.style.height);
        
        // Calculate coordinates on the actual image
        const scaleX = previewImage.naturalWidth / imageRect.width;
        const scaleY = previewImage.naturalHeight / imageRect.height;
        
        document.getElementById('cropX').value = Math.round(cropLeft * scaleX);
        document.getElementById('cropY').value = Math.round(cropTop * scaleY);
        document.getElementById('cropWidth').value = Math.round(cropWidth * scaleX);
        document.getElementById('cropHeight').value = Math.round(cropHeight * scaleY);
    }

    function getAdDimensions() {
        if (currentAdType === 1) { // Hero Banner
            return { width: 600, height: 180 };
        } else { // Bottom Page
            return { width: 728, height: 90 };
        }
    }

    // Reset crop button
    document.getElementById('resetCrop').addEventListener('click', function() {
        if (imageLoaded) {
            resetCrop();
        }
    });

    // Form submission - just use the hidden fields
    document.querySelector('form').addEventListener('submit', function(e) {
        if (imageLoaded) {
            updateHiddenFields();
        }
    });
</script>