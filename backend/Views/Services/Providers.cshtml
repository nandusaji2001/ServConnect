@model ServConnect.ViewModels.ServiceProvidersViewModel
@{
    ViewData["Title"] = $"Providers - {Model.ServiceName}";
}

<style>
    .provider-card {
        border-radius: 16px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        border: 1px solid #f1f5f9;
        transition: all 0.3s ease;
    }
    .provider-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }
    .avatar-circle {
        width: 60px; 
        height: 60px; 
        border-radius: 50%; 
        display: grid; 
        place-items: center;
        background: linear-gradient(135deg, #10B981 0%, #059669 100%);
        color: white;
        font-size: 1.5rem;
        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.2);
    }
    .price-tag {
        background: linear-gradient(135deg, #10B981 0%, #059669 100%);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 1.1rem;
    }
    .rating-stars {
        color: #F59E0B;
    }
    .contact-info {
        background: #f8fafc;
        border-radius: 8px;
        padding: 12px;
    }
    .service-description {
        color: #6b7280;
        line-height: 1.6;
    }
    .availability-badge {
        background: #10B981;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    .unavailable-badge {
        background: #ef4444;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    .booking-validation-message {
        font-size: 0.875rem;
        border-radius: 6px;
        padding: 8px 12px;
        margin-top: 8px;
    }
    .booking-validation-message.alert-success {
        background-color: #d1f2eb;
        border-color: #10b981;
        color: #047857;
    }
    .booking-validation-message.alert-danger {
        background-color: #fee2e2;
        border-color: #ef4444;
        color: #dc2626;
    }
    .availability-info {
        font-size: 0.875rem;
        background-color: #e0f2fe;
        border-color: #0ea5e9;
        color: #0369a1;
    }
</style>

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-4">
        <div>
            <h2 class="mb-1">@Model.ServiceName</h2>
            <p class="text-muted mb-0">Find trusted service providers in your area</p>
        </div>
        <a class="btn btn-outline-secondary" href="@Url.Action("Browse", "Services")">
            <i class="fas fa-arrow-left me-1"></i> Back to Services
        </a>
    </div>

    @if (Model.Providers == null || !Model.Providers.Any())
    {
        <div class="alert alert-info text-center py-4">
            <i class="fas fa-info-circle me-2"></i>
            No providers available for this service yet. Check back later!
        </div>
    }
    else
    {
        <div class="row g-4">
            @{ var idx = 0; }
            @foreach (var p in Model.Providers)
            {
                var modalId = $"bookModal-{p.Id}-{idx}";
                var formId = $"bookForm-{p.Id}-{idx}";
                <div class="col-12 col-lg-6">
                    <div class="card h-100 provider-card">
                        <div class="card-body p-4">
                            <!-- Header with Avatar and Basic Info -->
                            <div class="d-flex align-items-start gap-3 mb-3">
                                <div class="avatar-circle">
                                    <i class="fas fa-user"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center justify-content-between mb-1">
                                        <h5 class="mb-0">@(!string.IsNullOrWhiteSpace(p.ProviderName) ? p.ProviderName : "Service Provider")</h5>
                                        @if (p.IsAvailable)
                                        {
                                            <span class="availability-badge">Available</span>
                                        }
                                        else
                                        {
                                            <span class="unavailable-badge">Unavailable</span>
                                        }
                                    </div>
                                    <div class="text-muted small mb-2">
                                        <i class="fas fa-tag me-1"></i>@(!string.IsNullOrWhiteSpace(p.ServiceName) ? p.ServiceName : Model.ServiceName)
                                    </div>
                                    @if (p.Rating > 0)
                                    {
                                        <div class="d-flex align-items-center gap-1 mb-2">
                                            <div class="rating-stars">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= Math.Floor(p.Rating))
                                                    {
                                                        <i class="fas fa-star"></i>
                                                    }
                                                    else if (i - 0.5 <= p.Rating)
                                                    {
                                                        <i class="fas fa-star-half-alt"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="far fa-star"></i>
                                                    }
                                                }
                                            </div>
                                            <span class="text-muted small">@p.Rating.ToString("F1") (@p.ReviewCount reviews)</span>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Service Description -->
                            @if (!string.IsNullOrWhiteSpace(p.Description))
                            {
                                <div class="service-description mb-3">
                                    @p.Description
                                </div>
                            }

                            <!-- Contact Information -->
                            <div class="contact-info mb-3">
                                <div class="row g-2">
                                    @if (!string.IsNullOrWhiteSpace(p.ProviderPhone))
                                    {
                                        <div class="col-6">
                                            <small class="text-muted d-block">Phone</small>
                                            <div class="fw-medium">@p.ProviderPhone</div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(p.ProviderEmail))
                                    {
                                        <div class="col-6">
                                            <small class="text-muted d-block">Email</small>
                                            <div class="fw-medium">@p.ProviderEmail</div>
                                        </div>
                                    }
                                </div>
                                @if (!string.IsNullOrWhiteSpace(p.ProviderAddress))
                                {
                                    <div class="mt-2">
                                        <small class="text-muted d-block">Address</small>
                                        <div class="fw-medium">@p.ProviderAddress</div>
                                    </div>
                                }
                            </div>

                            <!-- Availability -->
                            @if (p.AvailableDays.Any() || !string.IsNullOrWhiteSpace(p.AvailableHours))
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">Availability</small>
                                    @if (p.AvailableDays.Any())
                                    {
                                        <div class="mb-1">
                                            <span class="badge bg-light text-dark me-1">@string.Join(", ", p.AvailableDays)</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(p.AvailableHours))
                                    {
                                        <div class="text-muted small">@p.AvailableHours</div>
                                    }
                                </div>
                            }

                            <!-- Price and Action -->
                            <div class="d-flex align-items-center justify-content-between mt-auto">
                                <div>
                                    @if (p.Price > 0)
                                    {
                                        <div class="price-tag">
                                            @p.Currency @p.Price.ToString("F2") @p.PriceUnit
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-muted">Price on request</div>
                                    }
                                </div>
                                <div class="btn-group">
                                    <button class="btn btn-primary" type="button" data-bs-toggle="modal" data-bs-target="#@modalId">
                                        <i class="fas fa-calendar-check me-1" ></i> Book Now
                                    </button>
                                    <a class="btn btn-outline-danger" href="@Url.Action("Create","Complaints", new { role = ServConnect.Models.RoleTypes.User, providerId = p.ProviderId, providerName = p.ProviderName })">
                                        <i class="fas fa-flag"></i> Report
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal OUTSIDE the card -->
                <div class="modal fade" id="@modalId" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Book @p.ServiceName with @p.ProviderName</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="@formId" onsubmit="return submitBooking('@formId', '@modalId', '@p.ProviderId', '@(p.ProviderName ?? "Provider")', '@(p.ServiceName ?? Model.ServiceName)')">
                                    <div class="mb-3">
                                        <label class="form-label">Preferred Date & Time <span class="text-danger">*</span></label>
                                        <input required class="form-control" type="datetime-local" name="serviceDateTime" />
                                        <div class="form-text">Select a date and time when you need the service</div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Note (optional)</label>
                                        <textarea class="form-control" name="note" rows="2" placeholder="Any additional details or special requirements"></textarea>
                                    </div>
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Booking will use your profile phone and address. Update your profile if needed.
                                    </div>
                                    <input type="hidden" name="providerServiceId" value="@p.Id" />
                                    <button class="btn btn-primary" type="submit" id="submit-@formId">
                                        <i class="fas fa-paper-plane me-1"></i>Send Request
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                idx++;
            }
        </div>
    }
</div>

@section Scripts {
<script src="~/js/booking-validation.js"></script>
<script>
async function submitBooking(formId, modalId, providerId, providerName, serviceName) {
    console.log('[DEBUG] submitBooking called with:', { formId, modalId, providerId, providerName, serviceName });
    
    try {
        const form = document.getElementById(formId);
        if (!form) {
            console.error('[ERROR] Form not found:', formId);
            alert('Form not found!');
            return false;
        }

        const dtLocal = form.serviceDateTime.value; 
        if (!dtLocal) { 
            console.error('[ERROR] No date/time selected');
            alert('Please select date & time'); 
            return false; 
        }

        // Check if the submit button is disabled (validation failed)
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton && submitButton.disabled) {
            alert('Please fix the validation errors before submitting');
            return false;
        }

        const serviceDateTime = new Date(dtLocal);
        console.log('[DEBUG] Service date/time:', serviceDateTime);

        const providerServiceIdInput = form.querySelector("input[name='providerServiceId']");
        if (!providerServiceIdInput) {
            console.error('[ERROR] Provider service ID input not found');
            alert('Provider service ID not found');
            return false;
        }

        // Format datetime in local timezone (same as validation)
        const year = serviceDateTime.getFullYear();
        const month = String(serviceDateTime.getMonth() + 1).padStart(2, '0');
        const day = String(serviceDateTime.getDate()).padStart(2, '0');
        const hours = String(serviceDateTime.getHours()).padStart(2, '0');
        const minutes = String(serviceDateTime.getMinutes()).padStart(2, '0');
        const seconds = String(serviceDateTime.getSeconds()).padStart(2, '0');
        
        const localDateTime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;

        const payload = {
            providerServiceId: providerServiceIdInput.value,
            providerId: providerId,
            providerName: providerName,
            serviceName: serviceName,
            serviceDateTime: localDateTime,
            note: form.note.value || ''
        };

        console.log('[DEBUG] Booking payload:', payload);
        console.log('[DEBUG] Making booking request...');

        // Create AbortController for timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

        const res = await fetch('/api/bookings', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest' // Helps identify AJAX requests
            },
            body: JSON.stringify(payload),
            credentials: 'same-origin', // Include cookies for authentication
            signal: controller.signal
        });

        clearTimeout(timeoutId); // Clear timeout if request completes

        console.log('[DEBUG] Response status:', res.status);
        console.log('[DEBUG] Response ok:', res.ok);

        // Check if response is a redirect (which might indicate auth issues)
        if (res.redirected) {
            console.warn('[WARN] Request was redirected to:', res.url);
            if (res.url.includes('/Account/Login')) {
                alert('Your session has expired. Please log in again.');
                window.location.href = '/Account/Login';
                return false;
            }
        }

        if (res.ok) {
            console.log('[SUCCESS] Booking created successfully - entering success block');
            
            // Don't try to parse JSON immediately, just show success
            console.log('[SUCCESS] Response received, showing success message');
            
            console.log('[SUCCESS] Hiding modal...');
            const modalEl = document.getElementById(modalId);
            if (modalEl) {
                const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                modal.hide();
                console.log('[SUCCESS] Modal hidden');
            }
            
            // Reset the form
            console.log('[SUCCESS] Resetting form...');
            const form = document.getElementById(formId);
            if (form) {
                form.reset();
                console.log('[SUCCESS] Form reset');
            }
            
            // Show success message immediately
            console.log('[SUCCESS] Showing success message...');
            alert('Booking request sent successfully! The provider will be notified.');
            
            // Optional: redirect to bookings
            if (confirm('Would you like to view your bookings now?')) {
                console.log('[SUCCESS] Redirecting to bookings...');
                window.location.href = '/my/bookings';
            } else {
                console.log('[SUCCESS] Staying on current page');
            }
        } else {
            console.log('[ERROR] Response not OK, status:', res.status);
            // Handle different status codes
            if (res.status === 401) {
                alert('Please log in to continue.');
                window.location.href = '/Account/Login';
                return false;
            } else if (res.status === 403) {
                alert('Access denied. Please ensure your profile is complete and approved.');
                return false;
            }

            try {
                const errorData = await res.json();
                console.log('[ERROR] Error response:', errorData);
                
                if (errorData.pendingPayments && errorData.pendingPayments.length > 0) {
                    // Show pending payments with payment links
                    let message = errorData.error + '\n\nPending Payments:\n';
                    errorData.pendingPayments.forEach(payment => {
                        message += `• ${payment.serviceName} by ${payment.providerName} - ₹${payment.amount}\n`;
                    });
                    message += '\nWould you like to complete your pending payments now?';
                    
                    if (confirm(message)) {
                        // Redirect to first pending payment
                        window.location.href = errorData.pendingPayments[0].paymentUrl;
                    }
                } else if (errorData.availableDays || errorData.availableHours) {
                    // Handle availability validation errors
                    let message = errorData.error || 'Booking time is not available.';
                    if (errorData.availableDays && errorData.availableDays.length > 0) {
                        message += `\n\nAvailable Days: ${errorData.availableDays.join(', ')}`;
                    }
                    if (errorData.availableHours) {
                        message += `\nAvailable Hours: ${errorData.availableHours}`;
                    }
                    message += '\n\nPlease select a different date and time.';
                    alert(message);
                } else {
                    alert('Failed to create booking: ' + (errorData.error || errorData.message || 'Unknown error'));
                }
            } catch (e) {
                // Fallback for non-JSON responses
                console.error('[ERROR] Failed to parse error response:', e);
                try {
                    const text = await res.text();
                    console.log('[ERROR] Error response text:', text);
                    alert('Failed to create booking: ' + (text || 'Server error'));
                } catch (textError) {
                    console.error('[ERROR] Failed to read response text:', textError);
                    alert('Failed to create booking: Server error (Status: ' + res.status + ')');
                }
            }
        }
    } catch (outerError) {
        console.error('[ERROR] Fetch failed:', outerError);
        console.error('[ERROR] Error details:', {
            name: outerError.name,
            message: outerError.message,
            stack: outerError.stack
        });
        
        // Check for specific error types
        if (outerError.name === 'AbortError') {
            alert('Request timed out. The booking may have been processed. Please check your bookings page.');
        } else {
            alert('Request sent . Please check your bookings to confirm the status.');
        }
    }

    return false; // prevent form from refreshing the page
}
</script>
}
