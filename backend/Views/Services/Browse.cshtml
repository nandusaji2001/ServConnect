@{
    ViewData["Title"] = Localizer["Title.BookService"];
}
<div class="container py-4">
    <h2 class="mb-3">@Localizer["Heading.BookService"]</h2>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center gap-2 flex-wrap">
            <span class="fw-semibold"><i class="fas fa-th-large me-2"></i> @Localizer["BrowseServices"]</span>
            <div class="d-flex gap-2 ms-auto align-items-center flex-wrap">
                <a href="/my/bookings" class="btn btn-outline-primary"><i class="fas fa-tasks me-1"></i> @Localizer["ManageServices"]</a>
                <input id="search" class="form-control w-auto flex-grow-1" placeholder="@Localizer["SearchServicesPlaceholder"]" style="min-width: 220px;">
            </div>
        </div>
        <div class="card-body p-3">
            <!-- Services grid -->
            <div id="servicesList" class="service-grid">
                <div class="text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --tile-bg: #ffffff;
        --tile-border: #e9ecef;
        --tile-hover-border: #d0d7de;
        --tile-shadow: 0 1px 2px rgba(16,24,40,.05);
        --tile-hover-shadow: 0 8px 24px rgba(16,24,40,.12);
    }

    /* Responsive grid for service cards */
    .service-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 16px;
    }
    @@media (min-width: 768px) {
        .service-grid { grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); }
    }

    /* Service card design */
    .service-tile {
        border-radius: 14px;
        padding: 16px;
        background: var(--tile-bg);
        border: 1px solid var(--tile-border);
        box-shadow: var(--tile-shadow);
        transition: transform .2s ease, box-shadow .2s ease, border-color .2s ease, background-color .2s ease;
        cursor: pointer;
        height: 100%;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    .service-tile:hover {
        transform: translateY(-3px);
        box-shadow: var(--tile-hover-shadow);
        border-color: var(--tile-hover-border);
    }
    .service-tile:focus-visible {
        outline: 3px solid rgba(13,110,253,.35);
        outline-offset: 2px;
    }

    .service-icon {
        width: 52px;
        height: 52px;
        border-radius: 12px;
        display: grid;
        place-items: center;
        background: linear-gradient(135deg, #eef4ff, #f7faff);
        color: #0d6efd;
        font-size: 22px;
        box-shadow: inset 0 0 0 1px rgba(13,110,253,.08), 0 2px 6px rgba(13,110,253,.08);
    }

    .service-name {
        font-weight: 700;
        color: #212529;
        line-height: 1.2;
        font-size: 1.05rem;
        letter-spacing: .2px;
    }

    .service-meta { color: #6c757d; font-size: .85rem; }

    .chevron {
        margin-left: 10px;
        color: #adb5bd;
        transition: transform .2s, color .2s, background-color .2s;
        width: 28px;
        height: 28px;
        display: grid;
        place-items: center;
        border-radius: 999px;
    }
    .service-tile:hover .chevron {
        color: #6c757d;
        transform: translateX(3px);
        background-color: #f1f3f5;
    }

    /* Header polish */
    .card-header {
        background: linear-gradient(180deg, rgba(248,249,250,.9), rgba(248,249,250,.7));
        border-bottom: 1px solid #e9ecef;
    }

    /* Input style */
    #search { border-radius: 999px; padding-inline: 14px; }
</style>

<script>
    // Ensure client-side slug matches server-side logic (trim + normalize)
    const toSlug = (t) => (t || '')
        .trim()
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-+|-+$/g, '');
    let allServices = [];

    function getServiceIcon(name){
        const n = (name||'').toLowerCase();
        if(n.includes('clean')) return 'fa-broom';
        if(n.includes('plumb')) return 'fa-wrench';
        if(n.includes('electri')) return 'fa-bolt';
        if(n.includes('paint')) return 'fa-paint-roller';
        if(n.includes('carp')) return 'fa-hammer';
        if(n.includes('ac') || n.includes('air')) return 'fa-fan';
        if(n.includes('beauty') || n.includes('salon')) return 'fa-spa';
        if(n.includes('repair') || n.includes('tech') || n.includes('mobile')) return 'fa-tools';
        return 'fa-concierge-bell';
    }

    function renderServices(list){
        const container = document.getElementById('servicesList');
        if(!list || list.length === 0){
            container.innerHTML = '<div class="text-muted">'+ '@Localizer["NoServices"]' +'</div>';
            return;
        }
        container.innerHTML = '';
        list.forEach(name => {
            const tile = document.createElement('div');
            tile.className = 'service-tile';
            tile.tabIndex = 0;
            tile.setAttribute('role', 'button');
            tile.onclick = () => navigateToProviders(name);
            tile.onkeypress = (e) => { if(e.key === 'Enter' || e.key === ' ') { e.preventDefault(); navigateToProviders(name); } };
            tile.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="service-icon me-2"><i class="fas ${getServiceIcon(name)}"></i></div>
                    <div class="flex-grow-1">
                        <div class="service-name">${name}</div>
                        <div class="service-meta">@Localizer["TapToExploreProviders"]</div>
                    </div>
                    <i class="fas fa-chevron-right chevron"></i>
                </div>`;
            container.appendChild(tile);
        });
    }

    function navigateToProviders(name){
        const slug = toSlug(name);
        window.location.href = `/services/providers/${slug}`;
    }

    async function loadServices(){
        const container = document.getElementById('servicesList');
        container.innerHTML = '<div class="text-muted">' + '@Localizer["Loading"]' + '</div>';
        try{
            const res = await fetch('/api/services/all');
            allServices = await res.json();
            renderServices(allServices);
        }catch{
            container.innerHTML = '<div class="text-danger">' + '@Localizer["FailedToLoad"]' + '</div>';
        }
    }

    document.getElementById('search').addEventListener('input', (e)=>{
        const q = e.target.value.toLowerCase();
        renderServices(allServices.filter(x => (x||'').toLowerCase().includes(q)));
    });

    document.addEventListener('DOMContentLoaded', loadServices);
</script>