@{
    ViewData["Title"] = "Manage My Services";
    var predefined = ViewBag.Predefined as IEnumerable<string>;
}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">My Services</h2>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#linkModal" onclick="openLink()">
            <i class="fas fa-plus"></i> Add Service
        </button>
    </div>

    <!-- Payment Pending Notice -->
    <div id="paymentPendingNotice" class="alert alert-warning" style="display: none;">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>Payment Pending:</strong> You have services waiting for payment completion. Click the <span class="badge bg-warning text-dark">Pay</span> button next to each service to complete payment and activate them.
    </div>

    <div class="card mb-3">
        <div class="card-header">Linked Services</div>
        <div class="card-body p-0">
            <ul class="list-group list-group-flush" id="linksList">
                <li class="list-group-item text-muted">Loading...</li>
            </ul>
        </div>
    </div>

    <div>
        <a asp-controller="ServiceProvider" asp-action="Dashboard" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>
</div>

<!-- Link Modal -->
<div class="modal fade" id="linkModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="serviceForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Service Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="serviceSelect" onchange="toggleOther()" required>
                                    <option value="" selected disabled>-- Select --</option>
                                    <!-- Options will be loaded dynamically from /api/services/all to match Browse -->
                                    <option value="__other__">Other</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3" id="otherWrap" style="display:none;">
                                <label class="form-label">Enter Category Name <span class="text-danger">*</span></label>
                                <input class="form-control" id="otherName" placeholder="e.g., AC Repair">
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Service Description</label>
                        <textarea class="form-control" id="description" rows="3" placeholder="Describe your service, experience, and what makes you unique..."></textarea>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Price <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="price" min="0.01" step="0.01" placeholder="0.00" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Price Unit</label>
                                <select class="form-select" id="priceUnit">
                                    <option value="per service">Per Service</option>
                                    <option value="per hour">Per Hour</option>
                                    <option value="per day">Per Day</option>
                                    <option value="per job">Per Job</option>
                                    <option value="per square foot">Per Square Foot</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Currency</label>
                                <select class="form-select" id="currency">
                                    <option value="USD">USD ($)</option>
                                    <option value="EUR">EUR (€)</option>
                                    <option value="GBP">GBP (£)</option>
                                    <option value="INR">INR (₹)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Available Days</label>
                                <div class="form-check-group">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="monday" value="Monday">
                                        <label class="form-check-label" for="monday">Monday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="tuesday" value="Tuesday">
                                        <label class="form-check-label" for="tuesday">Tuesday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="wednesday" value="Wednesday">
                                        <label class="form-check-label" for="wednesday">Wednesday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="thursday" value="Thursday">
                                        <label class="form-check-label" for="thursday">Thursday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="friday" value="Friday">
                                        <label class="form-check-label" for="friday">Friday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="saturday" value="Saturday">
                                        <label class="form-check-label" for="saturday">Saturday</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="sunday" value="Sunday">
                                        <label class="form-check-label" for="sunday">Sunday</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Available Hours</label>
                                <input type="text" class="form-control" id="availableHours" placeholder="e.g., 9:00 AM - 6:00 PM" value="9:00 AM - 6:00 PM">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Publication Plan Selection -->
                    <div class="mb-3">
                        <label class="form-label">Publication Plan <span class="text-danger">*</span></label>
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Payment Required:</strong> To publish your service and make it visible to customers, you need to select a publication plan and complete payment.
                        </div>
                        <div id="publicationPlans" class="row">
                            <!-- Plans will be loaded dynamically -->
                        </div>
                        <input type="hidden" id="selectedPlan" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveLink()">Save Service</button>
            </div>
        </div>
    </div>
</div>

<script>
    let publicationPlans = [];

    function toggleOther(){
        const v = document.getElementById('serviceSelect').value;
        document.getElementById('otherWrap').style.display = (v === '__other__') ? '' : 'none';
    }

    // Load publication plans
    async function loadPublicationPlans(){
        try{
            console.log('Loading publication plans...');
            const res = await fetch('/api/service-payment/plans');
            if(!res.ok) {
                console.error('Failed to fetch plans:', res.status, res.statusText);
                throw new Error(`HTTP ${res.status}: ${res.statusText}`);
            }
            publicationPlans = await res.json();
            console.log('Publication plans loaded:', publicationPlans);
            renderPublicationPlans();
        }catch(err){
            console.error('Failed to load publication plans:', err);
            // Show fallback message
            const container = document.getElementById('publicationPlans');
            if(container) {
                container.innerHTML = '<div class="alert alert-warning">Unable to load payment plans. Please refresh the page.</div>';
            }
        }
    }

    // Render publication plans
    function renderPublicationPlans(){
        const container = document.getElementById('publicationPlans');
        if(!container) return;
        
        container.innerHTML = '';
        publicationPlans.forEach(plan => {
            const col = document.createElement('div');
            col.className = 'col-lg-2 col-md-4 col-sm-6 mb-2';
            col.innerHTML = `
                <div class="card plan-card" onclick="selectPlan('${plan.name}', ${plan.durationInMonths}, ${plan.priceInRupees})" 
                     style="cursor: pointer; border: 2px solid #dee2e6;">
                    <div class="card-body text-center p-2">
                        <h6 class="card-title mb-1 small">${plan.name}</h6>
                        <div class="h6 text-success mb-1">₹${plan.priceInRupees}</div>
                        <small class="text-muted" style="font-size: 0.75rem;">${plan.description.split(' ').slice(0, 4).join(' ')}...</small>
                    </div>
                </div>
            `;
            container.appendChild(col);
        });
    }

    // Select publication plan
    function selectPlan(planName, duration, price){
        // Remove previous selection
        document.querySelectorAll('.plan-card').forEach(card => {
            card.style.border = '2px solid #dee2e6';
            card.style.backgroundColor = '';
        });
        
        // Highlight selected plan
        event.currentTarget.style.border = '2px solid #0d6efd';
        event.currentTarget.style.backgroundColor = '#f8f9fa';
        
        // Store selection
        document.getElementById('selectedPlan').value = JSON.stringify({
            name: planName,
            duration: duration,
            price: price
        });
    }

    async function loadCategories(){
        const select = document.getElementById('serviceSelect');
        const current = select.value;
        // Keep the first placeholder and last Other option
        // Rebuild options between them
        const head = '<option value="" selected disabled>-- Select --</option>';
        const tail = '<option value="__other__">Other</option>';
        select.innerHTML = head + tail;
        try{
            const res = await fetch('/api/services/all');
            const names = await res.json();
            // Insert before the last option (Other)
            const other = select.querySelector('option[value="__other__"]');
            names.forEach(n => {
                const opt = document.createElement('option');
                opt.value = n;
                opt.textContent = n;
                select.insertBefore(opt, other);
            });
            // restore selection if available
            if(current && [...select.options].some(o => o.value === current)) select.value = current;
        }catch{
            // silently ignore; keeps existing predefined if any
        }
    }
    function openLink(){
        document.getElementById('serviceSelect').value = '';
        document.getElementById('otherName').value = '';
        document.getElementById('description').value = '';
        document.getElementById('price').value = '';
        document.getElementById('priceUnit').value = 'per service';
        document.getElementById('currency').value = 'INR';
        document.getElementById('availableHours').value = '9:00 AM - 6:00 PM';
        document.getElementById('selectedPlan').value = '';
        
        // Clear all day checkboxes
        const dayCheckboxes = document.querySelectorAll('input[type="checkbox"][id^="monday"], input[type="checkbox"][id^="tuesday"], input[type="checkbox"][id^="wednesday"], input[type="checkbox"][id^="thursday"], input[type="checkbox"][id^="friday"], input[type="checkbox"][id^="saturday"], input[type="checkbox"][id^="sunday"]');
        dayCheckboxes.forEach(cb => cb.checked = false);
        
        // Reset plan selection
        document.querySelectorAll('.plan-card').forEach(card => {
            card.style.border = '2px solid #dee2e6';
            card.style.backgroundColor = '';
        });
        
        toggleOther();
        // refresh categories when opening modal
        loadCategories();
        loadPublicationPlans();
    }

    async function loadLinks(){
        const ul = document.getElementById('linksList');
        ul.innerHTML = '<li class="list-group-item text-muted">Loading...</li>';
        try{
            const res = await fetch('/api/services/mine');
            const links = await res.json();
            if(!links || links.length === 0){
                ul.innerHTML = '<li class="list-group-item text-muted">No services linked yet.</li>';
                document.getElementById('paymentPendingNotice').style.display = 'none';
                return;
            }
            
            // Check if there are any payment pending services
            const paymentPendingServices = links.filter(l => !l.isPaid);
            const paymentPendingNotice = document.getElementById('paymentPendingNotice');
            if(paymentPendingServices.length > 0){
                paymentPendingNotice.style.display = 'block';
            } else {
                paymentPendingNotice.style.display = 'none';
            }
            
            ul.innerHTML = '';
            links.forEach(l => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                
                const priceText = l.price > 0 ? `${l.currency} ${l.price} ${l.priceUnit}` : 'Price on request';
                const ratingText = l.rating > 0 ? `⭐ ${l.rating.toFixed(1)} (${l.reviewCount} reviews)` : '';
                
                // Payment and expiry status
                let statusBadge = '';
                let expiryInfo = '';
                
                if(!l.isPaid){
                    statusBadge = '<span class="badge bg-warning">Payment Pending</span>';
                } else if(l.isActive && !l.isExpired){
                    statusBadge = '<span class="badge bg-success">Active</span>';
                    
                    // Show expiry information
                    if(l.publicationEndDate){
                        const expiry = new Date(l.publicationEndDate);
                        const now = new Date();
                        const daysLeft = Math.ceil((expiry - now) / (1000 * 60 * 60 * 24));
                        
                        if(daysLeft <= 7){
                            expiryInfo = `<small class="text-warning">⚠️ Expires in ${daysLeft} days</small>`;
                        } else {
                            expiryInfo = `<small class="text-muted">Expires: ${expiry.toLocaleDateString()}</small>`;
                        }
                    }
                } else if(l.isExpired){
                    statusBadge = '<span class="badge bg-danger">Expired</span>';
                } else {
                    statusBadge = '<span class="badge bg-secondary">Inactive</span>';
                }
                
                li.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="flex-grow-1">
                            <h6 class="mb-1">${l.serviceName}</h6>
                            ${l.description ? `<p class="text-muted small mb-2">${l.description}</p>` : ''}
                            <div class="d-flex align-items-center gap-3 mb-1">
                                <small class="text-primary fw-medium">${priceText}</small>
                                ${ratingText ? `<small class="text-warning">${ratingText}</small>` : ''}
                                ${statusBadge}
                            </div>
                            ${expiryInfo ? `<div>${expiryInfo}</div>` : ''}
                        </div>
                        <div class="btn-group btn-group-sm">
                            ${!l.isPaid
                                ? `<button class="btn btn-warning" onclick="completePayment('${l.id}', '${l.serviceName}')" title="Complete Payment">
                                        <i class="fas fa-credit-card"></i> Pay
                                   </button>`
                                : l.isPaid && l.isActive && !l.isExpired
                                ? `<button class="btn btn-outline-danger" onclick="unlink('${l.id}')" title="Deactivate">
                                        <i class="fas fa-pause"></i>
                                   </button>`
                                : l.isPaid && !l.isActive
                                ? `<button class="btn btn-outline-success" onclick="relink('${l.id}')" title="Activate">
                                        <i class="fas fa-play"></i>
                                   </button>`
                                : ''}
                            <button class="btn btn-outline-primary" onclick='openEditLink(${JSON.stringify(l).replace(/'/g, "&apos;")})' title="Edit">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick='deleteLink("${l.id}")' title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                ul.appendChild(li);
            });
        }catch{ ul.innerHTML = '<li class="list-group-item text-danger">Failed to load.</li>'; }
    }

    async function saveLink(){
        const sel = document.getElementById('serviceSelect').value;
        const name = sel === '__other__' ? document.getElementById('otherName').value.trim() : sel;
        if(!name){ alert('Please select or enter a category name.'); return; }

        const price = parseFloat(document.getElementById('price').value);
        if(isNaN(price) || price <= 0){ alert('Please enter a valid price greater than 0.'); return; }
        
        // Check if payment plan is selected
        const selectedPlanData = document.getElementById('selectedPlan').value;
        if(!selectedPlanData){
            alert('Please select a publication plan to continue.');
            return;
        }
        
        // Get selected days
        const selectedDays = [];
        const dayCheckboxes = document.querySelectorAll('input[type="checkbox"][id^="monday"], input[type="checkbox"][id^="tuesday"], input[type="checkbox"][id^="wednesday"], input[type="checkbox"][id^="thursday"], input[type="checkbox"][id^="friday"], input[type="checkbox"][id^="saturday"], input[type="checkbox"][id^="sunday"]');
        dayCheckboxes.forEach(cb => {
            if(cb.checked) selectedDays.push(cb.value);
        });
        
        try{
            console.log('Creating service with payment plan...');
            
            // First create the service link
            const linkPayload = {
                serviceName: name,
                description: document.getElementById('description').value.trim(),
                price: parseFloat(document.getElementById('price').value) || 0,
                priceUnit: document.getElementById('priceUnit').value,
                currency: document.getElementById('currency').value,
                availableDays: selectedDays,
                availableHours: document.getElementById('availableHours').value.trim()
            };

            console.log('Service link payload:', linkPayload);

            const linkRes = await fetch('/api/services/link', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(linkPayload)
            });

            if(!linkRes.ok) {
                const errorText = await linkRes.text();
                console.error('Service link creation failed:', errorText);
                throw new Error('Failed to create service: ' + errorText);
            }
            const serviceLink = await linkRes.json();
            console.log('Service link created:', serviceLink);

            // Create payment
            const planData = JSON.parse(selectedPlanData);
            const paymentPayload = {
                serviceName: name,
                planName: planData.name,
                durationInMonths: planData.duration,
                amountInRupees: planData.price
            };

            console.log('Payment payload:', paymentPayload);

            const paymentRes = await fetch('/api/service-payment/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(paymentPayload)
            });

            if(!paymentRes.ok) {
                const errorText = await paymentRes.text();
                console.error('Payment creation failed:', errorText);
                throw new Error('Failed to create payment: ' + errorText);
            }
            const paymentData = await paymentRes.json();
            console.log('Payment created:', paymentData);

            // Store service ID for activation after payment
            sessionStorage.setItem('pendingServiceId', serviceLink.id);
            sessionStorage.setItem('pendingPaymentId', paymentData.paymentId);

            bootstrap.Modal.getInstance(document.getElementById('linkModal'))?.hide();
            
            console.log('Redirecting to payment page...');
            // Redirect to payment page
            window.location.href = `/service-payment/pay/${paymentData.paymentId}`;
            
        }catch(err){ 
            console.error('Service creation error:', err);
            alert('Failed to add service: ' + (err.message || 'Unknown error')); 
        }
    }

    async function unlink(id){
        if(!confirm('Unlink this service?')) return;
        try{
            const res = await fetch(`/api/services/mine/${id}`, { method: 'DELETE' });
            if(res.status === 204) await loadLinks();
            else alert('Failed to unlink');
        }catch{ alert('Failed to unlink'); }
    }

    async function relink(id){
        try{
            const res = await fetch(`/api/services/mine/${id}/relink`, { method: 'POST' });
            if(res.status === 204) await loadLinks();
            else alert('Failed to link');
        }catch{ alert('Failed to link'); }
    }

    function openEditLink(l){
        // reuse the link modal to edit core fields
        document.getElementById('serviceSelect').value = l.serviceName; // not editable here
        document.getElementById('otherName').value = '';
        document.getElementById('description').value = l.description || '';
        document.getElementById('price').value = l.price || 0;
        document.getElementById('priceUnit').value = l.priceUnit || 'per service';
        document.getElementById('currency').value = l.currency || 'USD';
        document.getElementById('availableHours').value = l.availableHours || '9:00 AM - 6:00 PM';
        // set days
        const days = new Set(l.availableDays || []);
        const dayCheckboxes = document.querySelectorAll('input[type="checkbox"][id^="monday"], input[type="checkbox"][id^="tuesday"], input[type="checkbox"][id^="wednesday"], input[type="checkbox"][id^="thursday"], input[type="checkbox"][id^="friday"], input[type="checkbox"][id^="saturday"], input[type="checkbox"][id^="sunday"]');
        dayCheckboxes.forEach(cb => cb.checked = days.has(cb.value));
        const modal = new bootstrap.Modal(document.getElementById('linkModal'));
        modal.show();
        // override save to update existing link
        const saveBtn = document.querySelector('#linkModal .btn.btn-primary');
        const originalHandler = saveLink; // fallback
        saveBtn.onclick = async () => {
            const price = parseFloat(document.getElementById('price').value);
            if(isNaN(price) || price <= 0){ alert('Please enter a valid price greater than 0.'); return; }
            const selectedDays = [];
            document.querySelectorAll('input[type="checkbox"][id^="monday"], input[type="checkbox"][id^="tuesday"], input[type="checkbox"][id^="wednesday"], input[type="checkbox"][id^="thursday"], input[type="checkbox"][id^="friday"], input[type="checkbox"][id^="saturday"], input[type="checkbox"][id^="sunday"]').forEach(cb => { if(cb.checked) selectedDays.push(cb.value); });
            const payload = {
                description: document.getElementById('description').value.trim(),
                price: parseFloat(document.getElementById('price').value) || 0,
                priceUnit: document.getElementById('priceUnit').value,
                currency: document.getElementById('currency').value,
                availableDays: selectedDays,
                availableHours: document.getElementById('availableHours').value.trim()
            };
            try{
                const res = await fetch(`/api/services/mine/${l.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if(!res.ok && res.status !== 204) throw new Error();
                bootstrap.Modal.getInstance(document.getElementById('linkModal'))?.hide();
                await loadLinks();
            }catch{ alert('Failed to update'); }
        };
    }

    async function deleteLink(id){
        if(!confirm('Delete this service link permanently?')) return;
        try{
            const res = await fetch(`/api/services/mine/${id}/hard`, { method: 'DELETE' });
            if(res.status === 204) await loadLinks();
            else alert('Failed to delete');
        }catch{ alert('Failed to delete'); }
    }

    // Complete payment for pending services
    async function completePayment(serviceId, serviceName){
        try{
            console.log('Completing payment for service:', serviceId, serviceName);
            
            // Show payment plan selection modal
            await showPaymentPlanModal(serviceId, serviceName);
            
        }catch(err){
            console.error('Failed to initiate payment:', err);
            alert('Failed to initiate payment: ' + (err.message || 'Unknown error'));
        }
    }

    // Show payment plan selection modal for existing service
    async function showPaymentPlanModal(serviceId, serviceName){
        // Load publication plans if not already loaded
        if(!publicationPlans || publicationPlans.length === 0){
            await loadPublicationPlans();
        }
        
        // Create and show modal
        const modalHtml = `
            <div class="modal fade" id="paymentPlanModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Complete Payment for ${serviceName}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Complete Your Payment:</strong> Select a publication plan to activate your service and make it visible to customers.
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Select Publication Plan <span class="text-danger">*</span></label>
                                <div id="paymentPlanOptions" class="row">
                                    <!-- Plans will be loaded here -->
                                </div>
                                <input type="hidden" id="selectedPaymentPlan" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="proceedWithPayment('${serviceId}', '${serviceName}')">
                                <i class="fas fa-credit-card me-2"></i>Proceed to Payment
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Remove existing modal if any
        const existingModal = document.getElementById('paymentPlanModal');
        if(existingModal) existingModal.remove();
        
        // Add modal to DOM
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
        // Render payment plans
        renderPaymentPlanOptions();
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('paymentPlanModal'));
        modal.show();
    }

    // Render payment plan options in the payment modal
    function renderPaymentPlanOptions(){
        const container = document.getElementById('paymentPlanOptions');
        if(!container) return;
        
        container.innerHTML = '';
        publicationPlans.forEach(plan => {
            const col = document.createElement('div');
            col.className = 'col-md-4 mb-2';
            col.innerHTML = `
                <div class="card payment-plan-card" onclick="selectPaymentPlan('${plan.name}', ${plan.durationInMonths}, ${plan.priceInRupees})" 
                     style="cursor: pointer; border: 2px solid #dee2e6;">
                    <div class="card-body text-center p-3">
                        <h6 class="card-title mb-1">${plan.name}</h6>
                        <div class="h5 text-success mb-1">₹${plan.priceInRupees}</div>
                        <small class="text-muted">${plan.description}</small>
                    </div>
                </div>
            `;
            container.appendChild(col);
        });
    }

    // Select payment plan in the payment modal
    function selectPaymentPlan(planName, duration, price){
        // Remove previous selection
        document.querySelectorAll('.payment-plan-card').forEach(card => {
            card.style.border = '2px solid #dee2e6';
            card.style.backgroundColor = '';
        });
        
        // Highlight selected plan
        event.currentTarget.style.border = '2px solid #0d6efd';
        event.currentTarget.style.backgroundColor = '#f8f9fa';
        
        // Store selection
        document.getElementById('selectedPaymentPlan').value = JSON.stringify({
            name: planName,
            duration: duration,
            price: price
        });
    }

    // Proceed with payment for existing service
    async function proceedWithPayment(serviceId, serviceName){
        const selectedPlanData = document.getElementById('selectedPaymentPlan').value;
        if(!selectedPlanData){
            alert('Please select a publication plan to continue.');
            return;
        }
        
        try{
            const planData = JSON.parse(selectedPlanData);
            
            // Create payment for existing service
            const paymentPayload = {
                serviceName: serviceName,
                planName: planData.name,
                durationInMonths: planData.duration,
                amountInRupees: planData.price
            };

            console.log('Creating payment for existing service:', paymentPayload);

            const paymentRes = await fetch('/api/service-payment/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(paymentPayload)
            });

            if(!paymentRes.ok) {
                const errorText = await paymentRes.text();
                console.error('Payment creation failed:', errorText);
                throw new Error('Failed to create payment: ' + errorText);
            }
            const paymentData = await paymentRes.json();
            console.log('Payment created for existing service:', paymentData);

            // Store service ID for activation after payment
            sessionStorage.setItem('pendingServiceId', serviceId);
            sessionStorage.setItem('pendingPaymentId', paymentData.paymentId);

            // Hide modal
            bootstrap.Modal.getInstance(document.getElementById('paymentPlanModal'))?.hide();
            
            console.log('Redirecting to payment page...');
            // Redirect to payment page
            window.location.href = `/service-payment/pay/${paymentData.paymentId}`;
            
        }catch(err){
            console.error('Payment creation error:', err);
            alert('Failed to create payment: ' + (err.message || 'Unknown error'));
        }
    }

    document.addEventListener('DOMContentLoaded', loadLinks);
</script>